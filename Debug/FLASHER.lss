
FLASHER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000026a0  00002714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000022f8  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000115b  00000000  00000000  00004a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008953  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a2bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a5 12 	call	0x254a	; 0x254a <main>
      7a:	0c 94 4e 13 	jmp	0x269c	; 0x269c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 27 13 	jmp	0x264e	; 0x264e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <UART_Init>:
#include"avr/io.h"

#include "../../../common/Bit_op.h"

void UART_Init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
  // Set BaudRate -> 9600/16MhZ
  UBRRL = 102;
     b3e:	e9 e2       	ldi	r30, 0x29	; 41
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	86 e6       	ldi	r24, 0x66	; 102
     b44:	80 83       	st	Z, r24
  UBRRH = 0;
     b46:	e0 e4       	ldi	r30, 0x40	; 64
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	10 82       	st	Z, r1
  // Set Frame Format -> 8 data, 1 stop, No Parity
  UCSRC = 0x86;
     b4c:	e0 e4       	ldi	r30, 0x40	; 64
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	86 e8       	ldi	r24, 0x86	; 134
     b52:	80 83       	st	Z, r24
  // Enable RX and TX
  UCSRB = 0x18;
     b54:	ea e2       	ldi	r30, 0x2A	; 42
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	88 e1       	ldi	r24, 0x18	; 24
     b5a:	80 83       	st	Z, r24

}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <UART_TRANSMIT>:
void UART_TRANSMIT(uint8_t data )
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	0f 92       	push	r0
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA&(1<<5))); //buffer is empty
     b6e:	eb e2       	ldi	r30, 0x2B	; 43
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	80 72       	andi	r24, 0x20	; 32
     b7a:	90 70       	andi	r25, 0x00	; 0
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	b9 f3       	breq	.-18     	; 0xb6e <UART_TRANSMIT+0xc>
	UDR = data ;
     b80:	ec e2       	ldi	r30, 0x2C	; 44
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	80 83       	st	Z, r24
}
     b88:	0f 90       	pop	r0
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <UART_READ>:

uint8_t UART_READ(void)
{
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	0f 92       	push	r0
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
  uint8_t Result;
  // Wait until Reception Complete
  while((UCSRA&0x80) == 0x00);
     b9a:	eb e2       	ldi	r30, 0x2B	; 43
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	88 23       	and	r24, r24
     ba2:	dc f7       	brge	.-10     	; 0xb9a <UART_READ+0xa>
  Result = UDR;
     ba4:	ec e2       	ldi	r30, 0x2C	; 44
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	89 83       	std	Y+1, r24	; 0x01
  /* Clear Flag */
  Set_Bit(UCSRA,7);
     bac:	ab e2       	ldi	r26, 0x2B	; 43
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	eb e2       	ldi	r30, 0x2B	; 43
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	8c 93       	st	X, r24
  return Result;
     bba:	89 81       	ldd	r24, Y+1	; 0x01

}
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <I2C_init>:


//MASRTER TRANSMATTE ___ WRITE MODE

void I2C_init (void)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
	TWSR = (1<<TWPS0)|(1<<TWPS1); //4 PRESCALLE
     bcc:	e1 e2       	ldi	r30, 0x21	; 33
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	80 83       	st	Z, r24
	TWBR = (uint8_t)TWBR_value ;
     bd4:	e0 e2       	ldi	r30, 0x20	; 32
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	80 83       	st	Z, r24
}
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <I2C_START>:

uint8_t I2C_START(void)
{
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	0f 92       	push	r0
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
	//reset TW_CONTROL_REGISTER
	TWCR=0;
     bec:	e6 e5       	ldi	r30, 0x56	; 86
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	10 82       	st	Z, r1
	//transmit  START condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     bf2:	e6 e5       	ldi	r30, 0x56	; 86
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	84 ea       	ldi	r24, 0xA4	; 164
     bf8:	80 83       	st	Z, r24
	//wait for end transmission
	while(!(TWCR & (1 << TWINT)));
     bfa:	e6 e5       	ldi	r30, 0x56	; 86
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	88 23       	and	r24, r24
     c02:	dc f7       	brge	.-10     	; 0xbfa <I2C_START+0x18>
	//check if the start condition was successfully transmitted
	if((TWSR & 0xF8 )!= TW_START) return 0;
     c04:	e1 e2       	ldi	r30, 0x21	; 33
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	80 e0       	ldi	r24, 0x00	; 0
	return 1 ;
}
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <I2C_WRITE_address>:
//MASTER MODE



void I2C_WRITE_address(uint8_t adress )
{
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	0f 92       	push	r0
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	89 83       	std	Y+1, r24	; 0x01
    TWDR=adress + I2C_Write_MODE;    // Address and write instruction
     c20:	e3 e2       	ldi	r30, 0x23	; 35
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	80 83       	st	Z, r24
    TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
     c28:	e6 e5       	ldi	r30, 0x56	; 86
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	84 e8       	ldi	r24, 0x84	; 132
     c2e:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
     c30:	e6 e5       	ldi	r30, 0x56	; 86
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	88 23       	and	r24, r24
     c38:	dc f7       	brge	.-10     	; 0xc30 <I2C_WRITE_address+0x1c>
    while((TWSR & 0xF8)!= TW_MT_SLA_ACK);  // Check for the acknoledgement
     c3a:	e1 e2       	ldi	r30, 0x21	; 33
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	88 7f       	andi	r24, 0xF8	; 248
     c46:	90 70       	andi	r25, 0x00	; 0
     c48:	88 31       	cpi	r24, 0x18	; 24
     c4a:	91 05       	cpc	r25, r1
     c4c:	b1 f7       	brne	.-20     	; 0xc3a <I2C_WRITE_address+0x26>
}
     c4e:	0f 90       	pop	r0
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <I2C_read_address>:

void I2C_read_address(uint8_t adress)
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	0f 92       	push	r0
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	89 83       	std	Y+1, r24	; 0x01
    TWDR=adress+I2C_READ_MODE;    // Address and read instruction
     c62:	e3 e2       	ldi	r30, 0x23	; 35
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	8f 5f       	subi	r24, 0xFF	; 255
     c6a:	80 83       	st	Z, r24
    TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
     c6c:	e6 e5       	ldi	r30, 0x56	; 86
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	84 e8       	ldi	r24, 0x84	; 132
     c72:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
     c74:	e6 e5       	ldi	r30, 0x56	; 86
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	88 23       	and	r24, r24
     c7c:	dc f7       	brge	.-10     	; 0xc74 <I2C_read_address+0x1e>
    while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
     c7e:	e1 e2       	ldi	r30, 0x21	; 33
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	88 7f       	andi	r24, 0xF8	; 248
     c8a:	90 70       	andi	r25, 0x00	; 0
     c8c:	80 34       	cpi	r24, 0x40	; 64
     c8e:	91 05       	cpc	r25, r1
     c90:	b1 f7       	brne	.-20     	; 0xc7e <I2C_read_address+0x28>
}
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <I2C_MASTER_WRITE>:





uint8_t  I2C_MASTER_WRITE(uint8_t data){
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <I2C_MASTER_WRITE+0x6>
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	89 83       	std	Y+1, r24	; 0x01

	//load DATA INTO REGISTER
	TWDR = data ;
     ca6:	e3 e2       	ldi	r30, 0x23	; 35
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	80 83       	st	Z, r24

	// START transmission
	TWCR = (1<<TWINT) | (1<<TWEN) ;
     cae:	e6 e5       	ldi	r30, 0x56	; 86
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	84 e8       	ldi	r24, 0x84	; 132
     cb4:	80 83       	st	Z, r24

	// Wait for TWINT flag set in TWCR Register
	while(!(TWCR & (1 << TWINT)));
     cb6:	e6 e5       	ldi	r30, 0x56	; 86
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	dc f7       	brge	.-10     	; 0xcb6 <I2C_MASTER_WRITE+0x1c>

	//check  device has ACK Data done
	if((TWSR&0xF8) != TW_MT_DATA_ACK) return 1 ;
     cc0:	e1 e2       	ldi	r30, 0x21	; 33
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	88 7f       	andi	r24, 0xF8	; 248
     ccc:	90 70       	andi	r25, 0x00	; 0
     cce:	88 32       	cpi	r24, 0x28	; 40
     cd0:	91 05       	cpc	r25, r1
     cd2:	19 f0       	breq	.+6      	; 0xcda <I2C_MASTER_WRITE+0x40>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	8a 83       	std	Y+2, r24	; 0x02
     cd8:	01 c0       	rjmp	.+2      	; 0xcdc <I2C_MASTER_WRITE+0x42>

	return 0 ;
     cda:	1a 82       	std	Y+2, r1	; 0x02
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
}
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <I2C_MASTER_Read_data>:


//MASTWER READ MODE

uint8_t I2C_MASTER_Read_data(void)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
    TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
     cf0:	e6 e5       	ldi	r30, 0x56	; 86
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	84 e8       	ldi	r24, 0x84	; 132
     cf6:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
     cf8:	e6 e5       	ldi	r30, 0x56	; 86
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	88 23       	and	r24, r24
     d00:	dc f7       	brge	.-10     	; 0xcf8 <I2C_MASTER_Read_data+0x10>
    while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
     d02:	e1 e2       	ldi	r30, 0x21	; 33
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	88 7f       	andi	r24, 0xF8	; 248
     d0e:	90 70       	andi	r25, 0x00	; 0
     d10:	88 35       	cpi	r24, 0x58	; 88
     d12:	91 05       	cpc	r25, r1
     d14:	b1 f7       	brne	.-20     	; 0xd02 <I2C_MASTER_Read_data+0x1a>

    return TWDR ;
     d16:	e3 e2       	ldi	r30, 0x23	; 35
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
}
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <I2C_SLAVE_Init>:



//slave Init

uint8_t I2C_SLAVE_Init(uint8_t adresse){
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	00 d0       	rcall	.+0      	; 0xd28 <I2C_SLAVE_Init+0x6>
     d28:	0f 92       	push	r0
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	8a 83       	std	Y+2, r24	; 0x02

	// load address
	TWAR=adresse ;
     d30:	e2 e2       	ldi	r30, 0x22	; 34
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	80 83       	st	Z, r24
	// transmit ADRESS
	  TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);
     d38:	e6 e5       	ldi	r30, 0x56	; 86
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	84 ec       	ldi	r24, 0xC4	; 196
     d3e:	80 83       	st	Z, r24
	// delay for transmission
	while(!(TWCR & (1 << TWINT)));
     d40:	e6 e5       	ldi	r30, 0x56	; 86
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	88 23       	and	r24, r24
     d48:	dc f7       	brge	.-10     	; 0xd40 <I2C_SLAVE_Init+0x1e>

	//check if  the device has ACK READ OR WRITE  MODE
	while((TWSR & 0xF8)!= 0x08);
     d4a:	e1 e2       	ldi	r30, 0x21	; 33
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	88 7f       	andi	r24, 0xF8	; 248
     d56:	90 70       	andi	r25, 0x00	; 0
     d58:	88 30       	cpi	r24, 0x08	; 8
     d5a:	91 05       	cpc	r25, r1
     d5c:	b1 f7       	brne	.-20     	; 0xd4a <I2C_SLAVE_Init+0x28>
	uint8_t twst = TWSR & 0xF8 ;
     d5e:	e1 e2       	ldi	r30, 0x21	; 33
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	88 7f       	andi	r24, 0xF8	; 248
     d66:	89 83       	std	Y+1, r24	; 0x01
	if((twst !=TW_MT_SLA_ACK && twst!= TW_MR_SLA_ACK))return 1 ;
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	88 31       	cpi	r24, 0x18	; 24
     d6c:	31 f0       	breq	.+12     	; 0xd7a <I2C_SLAVE_Init+0x58>
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	80 34       	cpi	r24, 0x40	; 64
     d72:	19 f0       	breq	.+6      	; 0xd7a <I2C_SLAVE_Init+0x58>
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	8b 83       	std	Y+3, r24	; 0x03
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <I2C_SLAVE_Init+0x5a>
	return 0;
     d7a:	1b 82       	std	Y+3, r1	; 0x03
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <I2C_Slave_listen_READ>:

//Slave Receiver Mode

uint8_t I2C_Slave_listen_READ(){
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <I2C_Slave_listen_READ+0x6>
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62


		uint8_t status ;
		while(!(TWCR&(1<<TWINT)));
     d94:	e6 e5       	ldi	r30, 0x56	; 86
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	88 23       	and	r24, r24
     d9c:	dc f7       	brge	.-10     	; 0xd94 <I2C_Slave_listen_READ+0xa>
		status=TWSR&0xF8;
     d9e:	e1 e2       	ldi	r30, 0x21	; 33
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	88 7f       	andi	r24, 0xF8	; 248
     da6:	89 83       	std	Y+1, r24	; 0x01
		 while(status!= 0x60) // Loop till correct acknoledgement have been received
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	80 36       	cpi	r24, 0x60	; 96
     dac:	59 f0       	breq	.+22     	; 0xdc4 <I2C_Slave_listen_READ+0x3a>
		 {
		        // Get acknowlegement, Enable TWI, Clear TWI interrupt flag
		        TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
     dae:	e6 e5       	ldi	r30, 0x56	; 86
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	84 ec       	ldi	r24, 0xC4	; 196
     db4:	80 83       	st	Z, r24
		        while (!(TWCR & (1<<TWINT)));  // Wait for TWINT flag
     db6:	e6 e5       	ldi	r30, 0x56	; 86
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	88 23       	and	r24, r24
     dbe:	dc f7       	brge	.-10     	; 0xdb6 <I2C_Slave_listen_READ+0x2c>
		        return 0;
     dc0:	1a 82       	std	Y+2, r1	; 0x02
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <I2C_Slave_listen_READ+0x3e>
		 }
		 return 1 ;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	8a 83       	std	Y+2, r24	; 0x02
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
}
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	08 95       	ret

00000dd4 <I2C_SLAVE_READ>:



int8_t I2C_SLAVE_READ(void)
{
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
	  TWCR= (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
     ddc:	e6 e5       	ldi	r30, 0x56	; 86
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	84 ec       	ldi	r24, 0xC4	; 196
     de2:	80 83       	st	Z, r24
	    while (!(TWCR & (1<<TWINT)));    // Wait for TWINT flag
     de4:	e6 e5       	ldi	r30, 0x56	; 86
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	88 23       	and	r24, r24
     dec:	dc f7       	brge	.-10     	; 0xde4 <I2C_SLAVE_READ+0x10>
	    while((TWSR & 0xF8)!=0x80);        // Wait for acknowledgement
     dee:	e1 e2       	ldi	r30, 0x21	; 33
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	88 2f       	mov	r24, r24
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	88 7f       	andi	r24, 0xF8	; 248
     dfa:	90 70       	andi	r25, 0x00	; 0
     dfc:	80 38       	cpi	r24, 0x80	; 128
     dfe:	91 05       	cpc	r25, r1
     e00:	b1 f7       	brne	.-20     	; 0xdee <I2C_SLAVE_READ+0x1a>
	   return TWDR;                    // Get value from TWDR
     e02:	e3 e2       	ldi	r30, 0x23	; 35
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z

}
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <I2C_Slave_listen_WRITE>:


//slave transmater mode


uint8_t I2C_Slave_listen_WRITE(){
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	0f 92       	push	r0
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62

		uint8_t status ;
		while(!(TWCR&(1<<TWINT)));
     e18:	e6 e5       	ldi	r30, 0x56	; 86
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	88 23       	and	r24, r24
     e20:	dc f7       	brge	.-10     	; 0xe18 <I2C_Slave_listen_WRITE+0xa>
		 return 1 ;
     e22:	81 e0       	ldi	r24, 0x01	; 1
		        return 0;
		    }

		 return 1 ;

	}
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <I2C_SLAVE_WRITE>:


//slave write

void I2C_SLAVE_WRITE(uint8_t data) // Function to write data
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	0f 92       	push	r0
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	89 83       	std	Y+1, r24	; 0x01
    TWDR= data;              // Fill TWDR register whith the data to be sent
     e38:	e3 e2       	ldi	r30, 0x23	; 35
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	80 83       	st	Z, r24
    TWCR= (1<<TWEN)|(1<<TWINT);   // Enable TWI, Clear TWI interrupt flag
     e40:	e6 e5       	ldi	r30, 0x56	; 86
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	84 e8       	ldi	r24, 0x84	; 132
     e46:	80 83       	st	Z, r24
    while((TWSR & 0xF8) != 0xC0); // Wait for the acknowledgement
     e48:	e1 e2       	ldi	r30, 0x21	; 33
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	88 7f       	andi	r24, 0xF8	; 248
     e54:	90 70       	andi	r25, 0x00	; 0
     e56:	80 3c       	cpi	r24, 0xC0	; 192
     e58:	91 05       	cpc	r25, r1
     e5a:	b1 f7       	brne	.-20     	; 0xe48 <I2C_SLAVE_WRITE+0x1c>
}
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <I2C_READ_ACK>:


//slave read

uint8_t I2C_READ_ACK(void)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWEA) ;
     e6c:	e6 e5       	ldi	r30, 0x56	; 86
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	84 ec       	ldi	r24, 0xC4	; 196
     e72:	80 83       	st	Z, r24

	// Wait for TWINT flag set in TWCR Register
	  while (!(TWCR & (1 << TWINT)));
     e74:	e6 e5       	ldi	r30, 0x56	; 86
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	88 23       	and	r24, r24
     e7c:	dc f7       	brge	.-10     	; 0xe74 <I2C_READ_ACK+0x10>

	  return TWDR  ;
     e7e:	e3 e2       	ldi	r30, 0x23	; 35
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
}
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <I2C_READ_NOT_ACK>:

uint8_t I2C_READ_NOT_ACK(void)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1<<TWINT)|(1<<TWEN);
     e92:	e6 e5       	ldi	r30, 0x56	; 86
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	84 e8       	ldi	r24, 0x84	; 132
     e98:	80 83       	st	Z, r24
	// Wait for TWINT flag set in TWCR Register
		  while (!(TWCR & (1 << TWINT)));
     e9a:	e6 e5       	ldi	r30, 0x56	; 86
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	88 23       	and	r24, r24
     ea2:	dc f7       	brge	.-10     	; 0xe9a <I2C_READ_NOT_ACK+0x10>
		  return TWDR  ;
     ea4:	e3 e2       	ldi	r30, 0x23	; 35
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z

}
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <I2C_TRANSMATE>:




uint8_t I2C_TRANSMATE(uint8_t address , uint8_t*data , uint16_t length)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	27 97       	sbiw	r28, 0x07	; 7
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	8a 83       	std	Y+2, r24	; 0x02
     ec6:	7c 83       	std	Y+4, r23	; 0x04
     ec8:	6b 83       	std	Y+3, r22	; 0x03
     eca:	5e 83       	std	Y+6, r21	; 0x06
     ecc:	4d 83       	std	Y+5, r20	; 0x05
     ece:	12 c0       	rjmp	.+36     	; 0xef4 <I2C_TRANSMATE+0x44>


	for(uint8_t i ; i<length ; i++)
	{
		if(I2C_MASTER_WRITE(data[length])){
     ed0:	2b 81       	ldd	r18, Y+3	; 0x03
     ed2:	3c 81       	ldd	r19, Y+4	; 0x04
     ed4:	8d 81       	ldd	r24, Y+5	; 0x05
     ed6:	9e 81       	ldd	r25, Y+6	; 0x06
     ed8:	f9 01       	movw	r30, r18
     eda:	e8 0f       	add	r30, r24
     edc:	f9 1f       	adc	r31, r25
     ede:	80 81       	ld	r24, Z
     ee0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <I2C_MASTER_WRITE>
     ee4:	88 23       	and	r24, r24
     ee6:	19 f0       	breq	.+6      	; 0xeee <I2C_TRANSMATE+0x3e>

		return 1 ;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	8f 83       	std	Y+7, r24	; 0x07
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <I2C_TRANSMATE+0x5a>

uint8_t I2C_TRANSMATE(uint8_t address , uint8_t*data , uint16_t length)
{


	for(uint8_t i ; i<length ; i++)
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	28 17       	cp	r18, r24
     f00:	39 07       	cpc	r19, r25
     f02:	30 f3       	brcs	.-52     	; 0xed0 <I2C_TRANSMATE+0x20>

		return 1 ;
		}
	}

	I2C_STOP();
     f04:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <I2C_STOP>
return 0 ;
     f08:	1f 82       	std	Y+7, r1	; 0x07
     f0a:	8f 81       	ldd	r24, Y+7	; 0x07

}
     f0c:	27 96       	adiw	r28, 0x07	; 7
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <i2c_Recevie>:

uint8_t i2c_Recevie(uint8_t address , uint8_t*data ,uint8_t length)
{
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <i2c_Recevie+0xa>
     f28:	00 d0       	rcall	.+0      	; 0xf2a <i2c_Recevie+0xc>
     f2a:	0f 92       	push	r0
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	8a 83       	std	Y+2, r24	; 0x02
     f32:	7c 83       	std	Y+4, r23	; 0x04
     f34:	6b 83       	std	Y+3, r22	; 0x03
     f36:	4d 83       	std	Y+5, r20	; 0x05
	for(uint8_t i=0; i<length-1 ; i++)
     f38:	19 82       	std	Y+1, r1	; 0x01
     f3a:	0f c0       	rjmp	.+30     	; 0xf5a <i2c_Recevie+0x3c>
		{
			data[length]=I2C_READ_ACK();
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	8c 01       	movw	r16, r24
     f48:	02 0f       	add	r16, r18
     f4a:	13 1f       	adc	r17, r19
     f4c:	0e 94 32 07 	call	0xe64	; 0xe64 <I2C_READ_ACK>
     f50:	f8 01       	movw	r30, r16
     f52:	80 83       	st	Z, r24

}

uint8_t i2c_Recevie(uint8_t address , uint8_t*data ,uint8_t length)
{
	for(uint8_t i=0; i<length-1 ; i++)
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	28 17       	cp	r18, r24
     f6a:	39 07       	cpc	r19, r25
     f6c:	3c f3       	brlt	.-50     	; 0xf3c <i2c_Recevie+0x1e>
		{
			data[length]=I2C_READ_ACK();
		}
	 data[length-1]=I2C_READ_NOT_ACK();
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9c 01       	movw	r18, r24
     f76:	21 50       	subi	r18, 0x01	; 1
     f78:	30 40       	sbci	r19, 0x00	; 0
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	8c 01       	movw	r16, r24
     f80:	02 0f       	add	r16, r18
     f82:	13 1f       	adc	r17, r19
     f84:	0e 94 45 07 	call	0xe8a	; 0xe8a <I2C_READ_NOT_ACK>
     f88:	f8 01       	movw	r30, r16
     f8a:	80 83       	st	Z, r24
	 I2C_STOP();
     f8c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <I2C_STOP>

				return 0 ;
     f90:	80 e0       	ldi	r24, 0x00	; 0
		}
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	08 95       	ret

00000fa6 <I2C_STOP>:


void I2C_STOP(void){
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     fae:	e6 e5       	ldi	r30, 0x56	; 86
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	84 e9       	ldi	r24, 0x94	; 148
     fb4:	80 83       	st	Z, r24
		while(!(TWCR & (1 << TWINT)));
     fb6:	e6 e5       	ldi	r30, 0x56	; 86
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	88 23       	and	r24, r24
     fbe:	dc f7       	brge	.-10     	; 0xfb6 <I2C_STOP+0x10>
}
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <I2C_repeated_start>:


void I2C_repeated_start(void)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     fce:	e6 e5       	ldi	r30, 0x56	; 86
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	84 ea       	ldi	r24, 0xA4	; 164
     fd4:	80 83       	st	Z, r24
while(!(TWCR & (1<<TWINT))); // wait till restart condition is transmitted
     fd6:	e6 e5       	ldi	r30, 0x56	; 86
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 23       	and	r24, r24
     fde:	dc f7       	brge	.-10     	; 0xfd6 <I2C_repeated_start+0x10>
while((TWSR & 0xF8)!= 0x10); // Check for the acknoledgement
     fe0:	e1 e2       	ldi	r30, 0x21	; 33
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	88 7f       	andi	r24, 0xF8	; 248
     fec:	90 70       	andi	r25, 0x00	; 0
     fee:	80 31       	cpi	r24, 0x10	; 16
     ff0:	91 05       	cpc	r25, r1
     ff2:	b1 f7       	brne	.-20     	; 0xfe0 <I2C_repeated_start+0x1a>
}
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <Dio_vidSetPinDirection>:



void Dio_vidSetPinDirection(enuPortType Port, uint8_t Pin, enuPortDirection Direction)

{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <Dio_vidSetPinDirection+0x6>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <Dio_vidSetPinDirection+0x8>
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	6a 83       	std	Y+2, r22	; 0x02
    100c:	4b 83       	std	Y+3, r20	; 0x03

	switch(Port)
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	3d 83       	std	Y+5, r19	; 0x05
    1016:	2c 83       	std	Y+4, r18	; 0x04
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	9d 81       	ldd	r25, Y+5	; 0x05
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	91 05       	cpc	r25, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <Dio_vidSetPinDirection+0x2a>
    1022:	47 c0       	rjmp	.+142    	; 0x10b2 <Dio_vidSetPinDirection+0xb8>
    1024:	2c 81       	ldd	r18, Y+4	; 0x04
    1026:	3d 81       	ldd	r19, Y+5	; 0x05
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	2c f4       	brge	.+10     	; 0x1038 <Dio_vidSetPinDirection+0x3e>
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	71 f0       	breq	.+28     	; 0x1052 <Dio_vidSetPinDirection+0x58>
    1036:	cb c0       	rjmp	.+406    	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
    1038:	2c 81       	ldd	r18, Y+4	; 0x04
    103a:	3d 81       	ldd	r19, Y+5	; 0x05
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	31 05       	cpc	r19, r1
    1040:	09 f4       	brne	.+2      	; 0x1044 <Dio_vidSetPinDirection+0x4a>
    1042:	67 c0       	rjmp	.+206    	; 0x1112 <Dio_vidSetPinDirection+0x118>
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	83 30       	cpi	r24, 0x03	; 3
    104a:	91 05       	cpc	r25, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <Dio_vidSetPinDirection+0x56>
    104e:	91 c0       	rjmp	.+290    	; 0x1172 <Dio_vidSetPinDirection+0x178>
    1050:	be c0       	rjmp	.+380    	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
	{
	case Dio_PORTA:
		if (Direction == Dio_Input)
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	88 23       	and	r24, r24
    1056:	a9 f4       	brne	.+42     	; 0x1082 <Dio_vidSetPinDirection+0x88>
		{
			Clear_Bit(DDRA,Pin);
    1058:	aa e3       	ldi	r26, 0x3A	; 58
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ea e3       	ldi	r30, 0x3A	; 58
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <Dio_vidSetPinDirection+0x7c>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <Dio_vidSetPinDirection+0x78>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	a6 c0       	rjmp	.+332    	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
		}
		else if(Direction == Dio_Output)
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	09 f0       	breq	.+2      	; 0x108a <Dio_vidSetPinDirection+0x90>
    1088:	a2 c0       	rjmp	.+324    	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
		{
			Set_Bit(DDRA, Pin);
    108a:	aa e3       	ldi	r26, 0x3A	; 58
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ea e3       	ldi	r30, 0x3A	; 58
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <Dio_vidSetPinDirection+0xae>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <Dio_vidSetPinDirection+0xaa>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	8e c0       	rjmp	.+284    	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
		}
		break;
	case Dio_PORTB:
		if (Direction == Dio_Input)
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	88 23       	and	r24, r24
    10b6:	a9 f4       	brne	.+42     	; 0x10e2 <Dio_vidSetPinDirection+0xe8>
		{
			Clear_Bit(DDRB, Pin);
    10b8:	a7 e3       	ldi	r26, 0x37	; 55
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e7 e3       	ldi	r30, 0x37	; 55
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <Dio_vidSetPinDirection+0xdc>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <Dio_vidSetPinDirection+0xd8>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	76 c0       	rjmp	.+236    	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
		}
		else if(Direction == Dio_Output)
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	09 f0       	breq	.+2      	; 0x10ea <Dio_vidSetPinDirection+0xf0>
    10e8:	72 c0       	rjmp	.+228    	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
		{
			Set_Bit(DDRB, Pin);
    10ea:	a7 e3       	ldi	r26, 0x37	; 55
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e7 e3       	ldi	r30, 0x37	; 55
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <Dio_vidSetPinDirection+0x10e>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <Dio_vidSetPinDirection+0x10a>
    110c:	84 2b       	or	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	5e c0       	rjmp	.+188    	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
		}
		break;
	case Dio_PORTC:
		if (Direction == Dio_Input)
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	88 23       	and	r24, r24
    1116:	a9 f4       	brne	.+42     	; 0x1142 <Dio_vidSetPinDirection+0x148>
		{
			Clear_Bit(DDRC, Pin);
    1118:	a4 e3       	ldi	r26, 0x34	; 52
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e4 e3       	ldi	r30, 0x34	; 52
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <Dio_vidSetPinDirection+0x13c>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <Dio_vidSetPinDirection+0x138>
    113a:	80 95       	com	r24
    113c:	84 23       	and	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	46 c0       	rjmp	.+140    	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
		}
		else if(Direction == Dio_Output)
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	09 f0       	breq	.+2      	; 0x114a <Dio_vidSetPinDirection+0x150>
    1148:	42 c0       	rjmp	.+132    	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
		{
			Set_Bit(DDRC, Pin);
    114a:	a4 e3       	ldi	r26, 0x34	; 52
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e4 e3       	ldi	r30, 0x34	; 52
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <Dio_vidSetPinDirection+0x16e>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <Dio_vidSetPinDirection+0x16a>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	2e c0       	rjmp	.+92     	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
		}
		break;
	case Dio_PORTD:
		if (Direction == Dio_Input)
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	88 23       	and	r24, r24
    1176:	a9 f4       	brne	.+42     	; 0x11a2 <Dio_vidSetPinDirection+0x1a8>
		{
			Clear_Bit(DDRD, Pin);
    1178:	a1 e3       	ldi	r26, 0x31	; 49
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e1 e3       	ldi	r30, 0x31	; 49
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <Dio_vidSetPinDirection+0x19c>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <Dio_vidSetPinDirection+0x198>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	16 c0       	rjmp	.+44     	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
		}
		else if(Direction == Dio_Output)
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	99 f4       	brne	.+38     	; 0x11ce <Dio_vidSetPinDirection+0x1d4>
		{
			Set_Bit(DDRD, Pin);
    11a8:	a1 e3       	ldi	r26, 0x31	; 49
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e1 e3       	ldi	r30, 0x31	; 49
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <Dio_vidSetPinDirection+0x1cc>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <Dio_vidSetPinDirection+0x1c8>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
		}
		break;
	}
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <Dio_vidSetPortDirection>:

void Dio_vidSetPortDirection(enuPortType Port, enuPortDirection Direction)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <Dio_vidSetPortDirection+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <Dio_vidSetPortDirection+0x8>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3c 83       	std	Y+4, r19	; 0x04
    11f6:	2b 83       	std	Y+3, r18	; 0x03
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	21 f1       	breq	.+72     	; 0x124a <Dio_vidSetPortDirection+0x6c>
    1202:	2b 81       	ldd	r18, Y+3	; 0x03
    1204:	3c 81       	ldd	r19, Y+4	; 0x04
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	2c f4       	brge	.+10     	; 0x1216 <Dio_vidSetPortDirection+0x38>
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	61 f0       	breq	.+24     	; 0x122c <Dio_vidSetPortDirection+0x4e>
    1214:	46 c0       	rjmp	.+140    	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
    1216:	2b 81       	ldd	r18, Y+3	; 0x03
    1218:	3c 81       	ldd	r19, Y+4	; 0x04
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	21 f1       	breq	.+72     	; 0x1268 <Dio_vidSetPortDirection+0x8a>
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	91 05       	cpc	r25, r1
    1228:	71 f1       	breq	.+92     	; 0x1286 <Dio_vidSetPortDirection+0xa8>
    122a:	3b c0       	rjmp	.+118    	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
	{
	case Dio_PORTA:
		if (Direction == Dio_Input)
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	88 23       	and	r24, r24
    1230:	21 f4       	brne	.+8      	; 0x123a <Dio_vidSetPortDirection+0x5c>
		{
			DDRA = 0x00;
    1232:	ea e3       	ldi	r30, 0x3A	; 58
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	10 82       	st	Z, r1
    1238:	34 c0       	rjmp	.+104    	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
		}
		else if(Direction == Dio_Output)
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	89 f5       	brne	.+98     	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
		{
			DDRA = 0xFF;
    1240:	ea e3       	ldi	r30, 0x3A	; 58
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	80 83       	st	Z, r24
    1248:	2c c0       	rjmp	.+88     	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
		}
		break;
	case Dio_PORTB:
		if (Direction == Dio_Input)
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	88 23       	and	r24, r24
    124e:	21 f4       	brne	.+8      	; 0x1258 <Dio_vidSetPortDirection+0x7a>
		{
			DDRB = 0x00;
    1250:	e7 e3       	ldi	r30, 0x37	; 55
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	10 82       	st	Z, r1
    1256:	25 c0       	rjmp	.+74     	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
		}
		else if(Direction == Dio_Output)
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	11 f5       	brne	.+68     	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
		{
			DDRB = 0xFF;
    125e:	e7 e3       	ldi	r30, 0x37	; 55
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	80 83       	st	Z, r24
    1266:	1d c0       	rjmp	.+58     	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
		}

		break;
	case Dio_PORTC:
		if (Direction == Dio_Input)
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	88 23       	and	r24, r24
    126c:	21 f4       	brne	.+8      	; 0x1276 <Dio_vidSetPortDirection+0x98>
		{
			DDRC = 0x00;
    126e:	e4 e3       	ldi	r30, 0x34	; 52
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	10 82       	st	Z, r1
    1274:	16 c0       	rjmp	.+44     	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
		}
		else if(Direction == Dio_Output)
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	99 f4       	brne	.+38     	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
		{
			DDRC = 0xFF;
    127c:	e4 e3       	ldi	r30, 0x34	; 52
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8f ef       	ldi	r24, 0xFF	; 255
    1282:	80 83       	st	Z, r24
    1284:	0e c0       	rjmp	.+28     	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
		}

		break;
	case Dio_PORTD:
		if (Direction == Dio_Input)
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	88 23       	and	r24, r24
    128a:	21 f4       	brne	.+8      	; 0x1294 <Dio_vidSetPortDirection+0xb6>
		{
			DDRD = 0x00;
    128c:	e1 e3       	ldi	r30, 0x31	; 49
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	10 82       	st	Z, r1
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
		}
		else if(Direction == Dio_Output)
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	21 f4       	brne	.+8      	; 0x12a2 <Dio_vidSetPortDirection+0xc4>
		{
			DDRD = 0xFF;
    129a:	e1 e3       	ldi	r30, 0x31	; 49
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	80 83       	st	Z, r24
		}
		break;

	}
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <Dio_vidWritePin>:

void Dio_vidWritePin(enuPortType Port, uint8_t Pin, enuPinState State)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <Dio_vidWritePin+0x6>
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <Dio_vidWritePin+0x8>
    12b8:	0f 92       	push	r0
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	6a 83       	std	Y+2, r22	; 0x02
    12c2:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3d 83       	std	Y+5, r19	; 0x05
    12cc:	2c 83       	std	Y+4, r18	; 0x04
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	9d 81       	ldd	r25, Y+5	; 0x05
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <Dio_vidWritePin+0x2a>
    12d8:	47 c0       	rjmp	.+142    	; 0x1368 <Dio_vidWritePin+0xb8>
    12da:	2c 81       	ldd	r18, Y+4	; 0x04
    12dc:	3d 81       	ldd	r19, Y+5	; 0x05
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	2c f4       	brge	.+10     	; 0x12ee <Dio_vidWritePin+0x3e>
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	71 f0       	breq	.+28     	; 0x1308 <Dio_vidWritePin+0x58>
    12ec:	cb c0       	rjmp	.+406    	; 0x1484 <Dio_vidWritePin+0x1d4>
    12ee:	2c 81       	ldd	r18, Y+4	; 0x04
    12f0:	3d 81       	ldd	r19, Y+5	; 0x05
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <Dio_vidWritePin+0x4a>
    12f8:	67 c0       	rjmp	.+206    	; 0x13c8 <Dio_vidWritePin+0x118>
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	91 05       	cpc	r25, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <Dio_vidWritePin+0x56>
    1304:	91 c0       	rjmp	.+290    	; 0x1428 <Dio_vidWritePin+0x178>
    1306:	be c0       	rjmp	.+380    	; 0x1484 <Dio_vidWritePin+0x1d4>
	{
	case Dio_PORTA:
		if(State == Dio_High)
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	a1 f4       	brne	.+40     	; 0x1336 <Dio_vidWritePin+0x86>
		{
			Set_Bit(PORTA, Pin);
    130e:	ab e3       	ldi	r26, 0x3B	; 59
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	eb e3       	ldi	r30, 0x3B	; 59
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <Dio_vidWritePin+0x7c>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <Dio_vidWritePin+0x78>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	a7 c0       	rjmp	.+334    	; 0x1484 <Dio_vidWritePin+0x1d4>
		}
		else if(State == Dio_Low)
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	88 23       	and	r24, r24
    133a:	09 f0       	breq	.+2      	; 0x133e <Dio_vidWritePin+0x8e>
    133c:	a3 c0       	rjmp	.+326    	; 0x1484 <Dio_vidWritePin+0x1d4>
		{
			Clear_Bit(PORTA, Pin);
    133e:	ab e3       	ldi	r26, 0x3B	; 59
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	eb e3       	ldi	r30, 0x3B	; 59
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <Dio_vidWritePin+0xac>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <Dio_vidWritePin+0xa8>
    1360:	80 95       	com	r24
    1362:	84 23       	and	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	8e c0       	rjmp	.+284    	; 0x1484 <Dio_vidWritePin+0x1d4>
		}
		break;
	case Dio_PORTB:
		if(State == Dio_High)
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	a1 f4       	brne	.+40     	; 0x1396 <Dio_vidWritePin+0xe6>
		{
			Set_Bit(PORTB, Pin);
    136e:	a8 e3       	ldi	r26, 0x38	; 56
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e8 e3       	ldi	r30, 0x38	; 56
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <Dio_vidWritePin+0xdc>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <Dio_vidWritePin+0xd8>
    1390:	84 2b       	or	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	77 c0       	rjmp	.+238    	; 0x1484 <Dio_vidWritePin+0x1d4>
		}
		else if(State == Dio_Low)
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	88 23       	and	r24, r24
    139a:	09 f0       	breq	.+2      	; 0x139e <Dio_vidWritePin+0xee>
    139c:	73 c0       	rjmp	.+230    	; 0x1484 <Dio_vidWritePin+0x1d4>
		{
			Clear_Bit(PORTB, Pin);
    139e:	a8 e3       	ldi	r26, 0x38	; 56
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e8 e3       	ldi	r30, 0x38	; 56
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <Dio_vidWritePin+0x10c>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <Dio_vidWritePin+0x108>
    13c0:	80 95       	com	r24
    13c2:	84 23       	and	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	5e c0       	rjmp	.+188    	; 0x1484 <Dio_vidWritePin+0x1d4>
		}
		break;
	case Dio_PORTC:
		if(State == Dio_High)
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	a1 f4       	brne	.+40     	; 0x13f6 <Dio_vidWritePin+0x146>
		{
			Set_Bit(PORTC, Pin);
    13ce:	a5 e3       	ldi	r26, 0x35	; 53
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e5 e3       	ldi	r30, 0x35	; 53
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <Dio_vidWritePin+0x13c>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <Dio_vidWritePin+0x138>
    13f0:	84 2b       	or	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	47 c0       	rjmp	.+142    	; 0x1484 <Dio_vidWritePin+0x1d4>
		}
		else if(State == Dio_Low)
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 23       	and	r24, r24
    13fa:	09 f0       	breq	.+2      	; 0x13fe <Dio_vidWritePin+0x14e>
    13fc:	43 c0       	rjmp	.+134    	; 0x1484 <Dio_vidWritePin+0x1d4>
		{
			Clear_Bit(PORTC, Pin);
    13fe:	a5 e3       	ldi	r26, 0x35	; 53
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e3       	ldi	r30, 0x35	; 53
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <Dio_vidWritePin+0x16c>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <Dio_vidWritePin+0x168>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	2e c0       	rjmp	.+92     	; 0x1484 <Dio_vidWritePin+0x1d4>
		}
		break;

	case Dio_PORTD:
		if(State == Dio_High)
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	a1 f4       	brne	.+40     	; 0x1456 <Dio_vidWritePin+0x1a6>
		{
			Set_Bit(PORTD, Pin);
    142e:	a2 e3       	ldi	r26, 0x32	; 50
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e2 e3       	ldi	r30, 0x32	; 50
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <Dio_vidWritePin+0x19c>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <Dio_vidWritePin+0x198>
    1450:	84 2b       	or	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	17 c0       	rjmp	.+46     	; 0x1484 <Dio_vidWritePin+0x1d4>
		}
		else if(State == Dio_Low)
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	88 23       	and	r24, r24
    145a:	a1 f4       	brne	.+40     	; 0x1484 <Dio_vidWritePin+0x1d4>
		{
			Clear_Bit(PORTD, Pin);
    145c:	a2 e3       	ldi	r26, 0x32	; 50
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e2 e3       	ldi	r30, 0x32	; 50
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <Dio_vidWritePin+0x1ca>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <Dio_vidWritePin+0x1c6>
    147e:	80 95       	com	r24
    1480:	84 23       	and	r24, r20
    1482:	8c 93       	st	X, r24
		}
		break;
	}
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <Dio_vidWritePort>:

void Dio_vidWritePort(enuPortType Port, uint8_t Value)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <Dio_vidWritePort+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <Dio_vidWritePort+0x8>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	3c 83       	std	Y+4, r19	; 0x04
    14ac:	2b 83       	std	Y+3, r18	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	91 05       	cpc	r25, r1
    14b6:	d1 f0       	breq	.+52     	; 0x14ec <Dio_vidWritePort+0x58>
    14b8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ba:	3c 81       	ldd	r19, Y+4	; 0x04
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	31 05       	cpc	r19, r1
    14c0:	2c f4       	brge	.+10     	; 0x14cc <Dio_vidWritePort+0x38>
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	61 f0       	breq	.+24     	; 0x14e2 <Dio_vidWritePort+0x4e>
    14ca:	1e c0       	rjmp	.+60     	; 0x1508 <Dio_vidWritePort+0x74>
    14cc:	2b 81       	ldd	r18, Y+3	; 0x03
    14ce:	3c 81       	ldd	r19, Y+4	; 0x04
    14d0:	22 30       	cpi	r18, 0x02	; 2
    14d2:	31 05       	cpc	r19, r1
    14d4:	81 f0       	breq	.+32     	; 0x14f6 <Dio_vidWritePort+0x62>
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	91 05       	cpc	r25, r1
    14de:	81 f0       	breq	.+32     	; 0x1500 <Dio_vidWritePort+0x6c>
    14e0:	13 c0       	rjmp	.+38     	; 0x1508 <Dio_vidWritePort+0x74>
	{
	case Dio_PORTA:
		PORTA = Value;
    14e2:	eb e3       	ldi	r30, 0x3B	; 59
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	80 83       	st	Z, r24
    14ea:	0e c0       	rjmp	.+28     	; 0x1508 <Dio_vidWritePort+0x74>
		break;
	case Dio_PORTB:
		PORTB = Value;
    14ec:	e8 e3       	ldi	r30, 0x38	; 56
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	80 83       	st	Z, r24
    14f4:	09 c0       	rjmp	.+18     	; 0x1508 <Dio_vidWritePort+0x74>
		break;
	case Dio_PORTC:
		PORTC = Value;
    14f6:	e5 e3       	ldi	r30, 0x35	; 53
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 83       	st	Z, r24
    14fe:	04 c0       	rjmp	.+8      	; 0x1508 <Dio_vidWritePort+0x74>
		break;
	case Dio_PORTD:
		PORTD = Value;
    1500:	e2 e3       	ldi	r30, 0x32	; 50
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	80 83       	st	Z, r24
		break;
	}

}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <Dio_u8ReadPin>:

uint8_t Dio_u8ReadPin(enuPortType Port, uint8_t Pin)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <Dio_u8ReadPin+0x6>
    151c:	00 d0       	rcall	.+0      	; 0x151e <Dio_u8ReadPin+0x8>
    151e:	0f 92       	push	r0
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	8a 83       	std	Y+2, r24	; 0x02
    1526:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Result = 0;
    1528:	19 82       	std	Y+1, r1	; 0x01

	switch(Port)
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	3d 83       	std	Y+5, r19	; 0x05
    1532:	2c 83       	std	Y+4, r18	; 0x04
    1534:	4c 81       	ldd	r20, Y+4	; 0x04
    1536:	5d 81       	ldd	r21, Y+5	; 0x05
    1538:	41 30       	cpi	r20, 0x01	; 1
    153a:	51 05       	cpc	r21, r1
    153c:	09 f4       	brne	.+2      	; 0x1540 <Dio_u8ReadPin+0x2a>
    153e:	63 c0       	rjmp	.+198    	; 0x1606 <Dio_u8ReadPin+0xf0>
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	91 05       	cpc	r25, r1
    1548:	34 f4       	brge	.+12     	; 0x1556 <Dio_u8ReadPin+0x40>
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	21 15       	cp	r18, r1
    1550:	31 05       	cpc	r19, r1
    1552:	71 f0       	breq	.+28     	; 0x1570 <Dio_u8ReadPin+0x5a>
    1554:	37 c1       	rjmp	.+622    	; 0x17c4 <Dio_u8ReadPin+0x2ae>
    1556:	4c 81       	ldd	r20, Y+4	; 0x04
    1558:	5d 81       	ldd	r21, Y+5	; 0x05
    155a:	42 30       	cpi	r20, 0x02	; 2
    155c:	51 05       	cpc	r21, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <Dio_u8ReadPin+0x4c>
    1560:	9d c0       	rjmp	.+314    	; 0x169c <Dio_u8ReadPin+0x186>
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	9d 81       	ldd	r25, Y+5	; 0x05
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	91 05       	cpc	r25, r1
    156a:	09 f4       	brne	.+2      	; 0x156e <Dio_u8ReadPin+0x58>
    156c:	e2 c0       	rjmp	.+452    	; 0x1732 <Dio_u8ReadPin+0x21c>
    156e:	2a c1       	rjmp	.+596    	; 0x17c4 <Dio_u8ReadPin+0x2ae>
	{
	case Dio_PORTA:
		if(Get_Bit(DDRA, Pin) == 1)
    1570:	ea e3       	ldi	r30, 0x3A	; 58
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a9 01       	movw	r20, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <Dio_u8ReadPin+0x72>
    1584:	55 95       	asr	r21
    1586:	47 95       	ror	r20
    1588:	8a 95       	dec	r24
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <Dio_u8ReadPin+0x6e>
    158c:	ca 01       	movw	r24, r20
    158e:	81 70       	andi	r24, 0x01	; 1
    1590:	90 70       	andi	r25, 0x00	; 0
    1592:	88 23       	and	r24, r24
    1594:	91 f0       	breq	.+36     	; 0x15ba <Dio_u8ReadPin+0xa4>
		{
			/*The required Port is output*/
			Result = Get_Bit(PORTA, Pin);
    1596:	eb e3       	ldi	r30, 0x3B	; 59
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a9 01       	movw	r20, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <Dio_u8ReadPin+0x98>
    15aa:	55 95       	asr	r21
    15ac:	47 95       	ror	r20
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <Dio_u8ReadPin+0x94>
    15b2:	ca 01       	movw	r24, r20
    15b4:	81 70       	andi	r24, 0x01	; 1
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	05 c1       	rjmp	.+522    	; 0x17c4 <Dio_u8ReadPin+0x2ae>
		}
		else if(Get_Bit(DDRA, Pin) == 0)
    15ba:	ea e3       	ldi	r30, 0x3A	; 58
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a9 01       	movw	r20, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <Dio_u8ReadPin+0xbc>
    15ce:	55 95       	asr	r21
    15d0:	47 95       	ror	r20
    15d2:	8a 95       	dec	r24
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <Dio_u8ReadPin+0xb8>
    15d6:	ca 01       	movw	r24, r20
    15d8:	81 70       	andi	r24, 0x01	; 1
    15da:	90 70       	andi	r25, 0x00	; 0
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	09 f0       	breq	.+2      	; 0x15e2 <Dio_u8ReadPin+0xcc>
    15e0:	f1 c0       	rjmp	.+482    	; 0x17c4 <Dio_u8ReadPin+0x2ae>
		{
			/*The required PIN is input*/
			Result = Get_Bit(PINA, Pin);
    15e2:	e9 e3       	ldi	r30, 0x39	; 57
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a9 01       	movw	r20, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <Dio_u8ReadPin+0xe4>
    15f6:	55 95       	asr	r21
    15f8:	47 95       	ror	r20
    15fa:	8a 95       	dec	r24
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <Dio_u8ReadPin+0xe0>
    15fe:	ca 01       	movw	r24, r20
    1600:	81 70       	andi	r24, 0x01	; 1
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	df c0       	rjmp	.+446    	; 0x17c4 <Dio_u8ReadPin+0x2ae>
		}
		break;
	case Dio_PORTB:
		if(Get_Bit(DDRB, Pin) == 1)
    1606:	e7 e3       	ldi	r30, 0x37	; 55
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a9 01       	movw	r20, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <Dio_u8ReadPin+0x108>
    161a:	55 95       	asr	r21
    161c:	47 95       	ror	r20
    161e:	8a 95       	dec	r24
    1620:	e2 f7       	brpl	.-8      	; 0x161a <Dio_u8ReadPin+0x104>
    1622:	ca 01       	movw	r24, r20
    1624:	81 70       	andi	r24, 0x01	; 1
    1626:	90 70       	andi	r25, 0x00	; 0
    1628:	88 23       	and	r24, r24
    162a:	91 f0       	breq	.+36     	; 0x1650 <Dio_u8ReadPin+0x13a>
		{
			/*The required PIN is output*/
			Result = Get_Bit(PORTB, Pin);
    162c:	e8 e3       	ldi	r30, 0x38	; 56
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a9 01       	movw	r20, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <Dio_u8ReadPin+0x12e>
    1640:	55 95       	asr	r21
    1642:	47 95       	ror	r20
    1644:	8a 95       	dec	r24
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <Dio_u8ReadPin+0x12a>
    1648:	ca 01       	movw	r24, r20
    164a:	81 70       	andi	r24, 0x01	; 1
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	ba c0       	rjmp	.+372    	; 0x17c4 <Dio_u8ReadPin+0x2ae>
		}
		else if(Get_Bit(DDRB, Pin) == 0)
    1650:	e7 e3       	ldi	r30, 0x37	; 55
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a9 01       	movw	r20, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <Dio_u8ReadPin+0x152>
    1664:	55 95       	asr	r21
    1666:	47 95       	ror	r20
    1668:	8a 95       	dec	r24
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <Dio_u8ReadPin+0x14e>
    166c:	ca 01       	movw	r24, r20
    166e:	81 70       	andi	r24, 0x01	; 1
    1670:	90 70       	andi	r25, 0x00	; 0
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	09 f0       	breq	.+2      	; 0x1678 <Dio_u8ReadPin+0x162>
    1676:	a6 c0       	rjmp	.+332    	; 0x17c4 <Dio_u8ReadPin+0x2ae>
		{
			/*The required PIN is input*/
			Result = Get_Bit(PINB, Pin);
    1678:	e6 e3       	ldi	r30, 0x36	; 54
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	88 2f       	mov	r24, r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a9 01       	movw	r20, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <Dio_u8ReadPin+0x17a>
    168c:	55 95       	asr	r21
    168e:	47 95       	ror	r20
    1690:	8a 95       	dec	r24
    1692:	e2 f7       	brpl	.-8      	; 0x168c <Dio_u8ReadPin+0x176>
    1694:	ca 01       	movw	r24, r20
    1696:	81 70       	andi	r24, 0x01	; 1
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	94 c0       	rjmp	.+296    	; 0x17c4 <Dio_u8ReadPin+0x2ae>
		}
		break;
	case Dio_PORTC:
		if(Get_Bit(DDRC, Pin) == 1)
    169c:	e4 e3       	ldi	r30, 0x34	; 52
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	88 2f       	mov	r24, r24
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a9 01       	movw	r20, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <Dio_u8ReadPin+0x19e>
    16b0:	55 95       	asr	r21
    16b2:	47 95       	ror	r20
    16b4:	8a 95       	dec	r24
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <Dio_u8ReadPin+0x19a>
    16b8:	ca 01       	movw	r24, r20
    16ba:	81 70       	andi	r24, 0x01	; 1
    16bc:	90 70       	andi	r25, 0x00	; 0
    16be:	88 23       	and	r24, r24
    16c0:	91 f0       	breq	.+36     	; 0x16e6 <Dio_u8ReadPin+0x1d0>
		{
			/*The required PIN is output*/
			Result = Get_Bit(PORTC, Pin);
    16c2:	e5 e3       	ldi	r30, 0x35	; 53
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a9 01       	movw	r20, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <Dio_u8ReadPin+0x1c4>
    16d6:	55 95       	asr	r21
    16d8:	47 95       	ror	r20
    16da:	8a 95       	dec	r24
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <Dio_u8ReadPin+0x1c0>
    16de:	ca 01       	movw	r24, r20
    16e0:	81 70       	andi	r24, 0x01	; 1
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	6f c0       	rjmp	.+222    	; 0x17c4 <Dio_u8ReadPin+0x2ae>
		}
		else if(Get_Bit(DDRC, Pin) == 0)
    16e6:	e4 e3       	ldi	r30, 0x34	; 52
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a9 01       	movw	r20, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <Dio_u8ReadPin+0x1e8>
    16fa:	55 95       	asr	r21
    16fc:	47 95       	ror	r20
    16fe:	8a 95       	dec	r24
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <Dio_u8ReadPin+0x1e4>
    1702:	ca 01       	movw	r24, r20
    1704:	81 70       	andi	r24, 0x01	; 1
    1706:	90 70       	andi	r25, 0x00	; 0
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	09 f0       	breq	.+2      	; 0x170e <Dio_u8ReadPin+0x1f8>
    170c:	5b c0       	rjmp	.+182    	; 0x17c4 <Dio_u8ReadPin+0x2ae>
		{
			/*The required PIN is input*/
			Result = Get_Bit(PINC, Pin);
    170e:	e3 e3       	ldi	r30, 0x33	; 51
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a9 01       	movw	r20, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <Dio_u8ReadPin+0x210>
    1722:	55 95       	asr	r21
    1724:	47 95       	ror	r20
    1726:	8a 95       	dec	r24
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <Dio_u8ReadPin+0x20c>
    172a:	ca 01       	movw	r24, r20
    172c:	81 70       	andi	r24, 0x01	; 1
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	49 c0       	rjmp	.+146    	; 0x17c4 <Dio_u8ReadPin+0x2ae>
		}
		break;
	case Dio_PORTD:
		if(Get_Bit(DDRD, Pin) == 1)
    1732:	e1 e3       	ldi	r30, 0x31	; 49
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a9 01       	movw	r20, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <Dio_u8ReadPin+0x234>
    1746:	55 95       	asr	r21
    1748:	47 95       	ror	r20
    174a:	8a 95       	dec	r24
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <Dio_u8ReadPin+0x230>
    174e:	ca 01       	movw	r24, r20
    1750:	81 70       	andi	r24, 0x01	; 1
    1752:	90 70       	andi	r25, 0x00	; 0
    1754:	88 23       	and	r24, r24
    1756:	91 f0       	breq	.+36     	; 0x177c <Dio_u8ReadPin+0x266>
		{
			/*The required PIN is output*/
			Result = Get_Bit(PORTD, Pin);
    1758:	e2 e3       	ldi	r30, 0x32	; 50
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a9 01       	movw	r20, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <Dio_u8ReadPin+0x25a>
    176c:	55 95       	asr	r21
    176e:	47 95       	ror	r20
    1770:	8a 95       	dec	r24
    1772:	e2 f7       	brpl	.-8      	; 0x176c <Dio_u8ReadPin+0x256>
    1774:	ca 01       	movw	r24, r20
    1776:	81 70       	andi	r24, 0x01	; 1
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	24 c0       	rjmp	.+72     	; 0x17c4 <Dio_u8ReadPin+0x2ae>
		}
		else if(Get_Bit(DDRD, Pin) == 0)
    177c:	e1 e3       	ldi	r30, 0x31	; 49
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	88 2f       	mov	r24, r24
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a9 01       	movw	r20, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <Dio_u8ReadPin+0x27e>
    1790:	55 95       	asr	r21
    1792:	47 95       	ror	r20
    1794:	8a 95       	dec	r24
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <Dio_u8ReadPin+0x27a>
    1798:	ca 01       	movw	r24, r20
    179a:	81 70       	andi	r24, 0x01	; 1
    179c:	90 70       	andi	r25, 0x00	; 0
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	89 f4       	brne	.+34     	; 0x17c4 <Dio_u8ReadPin+0x2ae>
		{
			/*The required PIN is input*/
			Result = Get_Bit(PIND, Pin);
    17a2:	e0 e3       	ldi	r30, 0x30	; 48
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a9 01       	movw	r20, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <Dio_u8ReadPin+0x2a4>
    17b6:	55 95       	asr	r21
    17b8:	47 95       	ror	r20
    17ba:	8a 95       	dec	r24
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <Dio_u8ReadPin+0x2a0>
    17be:	ca 01       	movw	r24, r20
    17c0:	81 70       	andi	r24, 0x01	; 1
    17c2:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}

	return Result;
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <Dio_u8ReadPort>:

uint8_t Dio_u8ReadPort(enuPortType Port, uint8_t Control)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	00 d0       	rcall	.+0      	; 0x17dc <Dio_u8ReadPort+0x6>
    17dc:	00 d0       	rcall	.+0      	; 0x17de <Dio_u8ReadPort+0x8>
    17de:	0f 92       	push	r0
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	8a 83       	std	Y+2, r24	; 0x02
    17e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t  Result=0;
    17e8:	19 82       	std	Y+1, r1	; 0x01

	switch(Port)
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	3d 83       	std	Y+5, r19	; 0x05
    17f2:	2c 83       	std	Y+4, r18	; 0x04
    17f4:	8c 81       	ldd	r24, Y+4	; 0x04
    17f6:	9d 81       	ldd	r25, Y+5	; 0x05
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	91 05       	cpc	r25, r1
    17fc:	29 f1       	breq	.+74     	; 0x1848 <Dio_u8ReadPort+0x72>
    17fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1800:	3d 81       	ldd	r19, Y+5	; 0x05
    1802:	22 30       	cpi	r18, 0x02	; 2
    1804:	31 05       	cpc	r19, r1
    1806:	2c f4       	brge	.+10     	; 0x1812 <Dio_u8ReadPort+0x3c>
    1808:	8c 81       	ldd	r24, Y+4	; 0x04
    180a:	9d 81       	ldd	r25, Y+5	; 0x05
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	61 f0       	breq	.+24     	; 0x1828 <Dio_u8ReadPort+0x52>
    1810:	4a c0       	rjmp	.+148    	; 0x18a6 <Dio_u8ReadPort+0xd0>
    1812:	2c 81       	ldd	r18, Y+4	; 0x04
    1814:	3d 81       	ldd	r19, Y+5	; 0x05
    1816:	22 30       	cpi	r18, 0x02	; 2
    1818:	31 05       	cpc	r19, r1
    181a:	31 f1       	breq	.+76     	; 0x1868 <Dio_u8ReadPort+0x92>
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	9d 81       	ldd	r25, Y+5	; 0x05
    1820:	83 30       	cpi	r24, 0x03	; 3
    1822:	91 05       	cpc	r25, r1
    1824:	89 f1       	breq	.+98     	; 0x1888 <Dio_u8ReadPort+0xb2>
    1826:	3f c0       	rjmp	.+126    	; 0x18a6 <Dio_u8ReadPort+0xd0>
	{
	case Dio_PORTA:
		if(Control == 0)
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	88 23       	and	r24, r24
    182c:	29 f4       	brne	.+10     	; 0x1838 <Dio_u8ReadPort+0x62>
		{
			Result = PINA;
    182e:	e9 e3       	ldi	r30, 0x39	; 57
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	37 c0       	rjmp	.+110    	; 0x18a6 <Dio_u8ReadPort+0xd0>
		}
		else if(Control == 1)
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	a1 f5       	brne	.+104    	; 0x18a6 <Dio_u8ReadPort+0xd0>
		{
			Result = PORTA;
    183e:	eb e3       	ldi	r30, 0x3B	; 59
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	2f c0       	rjmp	.+94     	; 0x18a6 <Dio_u8ReadPort+0xd0>
		}
		break;
	case Dio_PORTB:
		if(Control == 0)
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	88 23       	and	r24, r24
    184c:	29 f4       	brne	.+10     	; 0x1858 <Dio_u8ReadPort+0x82>
		{
			Result = PINB;
    184e:	e6 e3       	ldi	r30, 0x36	; 54
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	27 c0       	rjmp	.+78     	; 0x18a6 <Dio_u8ReadPort+0xd0>
		}
		else if(Control == 1)
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	21 f5       	brne	.+72     	; 0x18a6 <Dio_u8ReadPort+0xd0>
		{
			Result = PORTB;
    185e:	e8 e3       	ldi	r30, 0x38	; 56
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	1f c0       	rjmp	.+62     	; 0x18a6 <Dio_u8ReadPort+0xd0>
		}
		break;

	case Dio_PORTC:
		if(Control == 0)
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	88 23       	and	r24, r24
    186c:	29 f4       	brne	.+10     	; 0x1878 <Dio_u8ReadPort+0xa2>
		{
			Result = PINC;
    186e:	e3 e3       	ldi	r30, 0x33	; 51
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	17 c0       	rjmp	.+46     	; 0x18a6 <Dio_u8ReadPort+0xd0>
		}
		else if(Control == 1)
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	a1 f4       	brne	.+40     	; 0x18a6 <Dio_u8ReadPort+0xd0>
		{
			Result = PORTC;
    187e:	e5 e3       	ldi	r30, 0x35	; 53
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	0f c0       	rjmp	.+30     	; 0x18a6 <Dio_u8ReadPort+0xd0>
		}
		break;

	case Dio_PORTD:
		if(Control == 0)
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	88 23       	and	r24, r24
    188c:	29 f4       	brne	.+10     	; 0x1898 <Dio_u8ReadPort+0xc2>
		{
			Result = PIND;
    188e:	e0 e3       	ldi	r30, 0x30	; 48
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	07 c0       	rjmp	.+14     	; 0x18a6 <Dio_u8ReadPort+0xd0>
		}
		else if(Control == 1)
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	21 f4       	brne	.+8      	; 0x18a6 <Dio_u8ReadPort+0xd0>
		{
			Result = PORTD;
    189e:	e2 e3       	ldi	r30, 0x32	; 50
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	89 83       	std	Y+1, r24	; 0x01
		}
		break;

	}
	return Result;
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	08 95       	ret

000018b8 <Dio_vidTogglePin>:

void Dio_vidTogglePin(enuPortType Port, uint8_t Pin)
{
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	00 d0       	rcall	.+0      	; 0x18be <Dio_vidTogglePin+0x6>
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <Dio_vidTogglePin+0x8>
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	3c 83       	std	Y+4, r19	; 0x04
    18d0:	2b 83       	std	Y+3, r18	; 0x03
    18d2:	4b 81       	ldd	r20, Y+3	; 0x03
    18d4:	5c 81       	ldd	r21, Y+4	; 0x04
    18d6:	41 30       	cpi	r20, 0x01	; 1
    18d8:	51 05       	cpc	r21, r1
    18da:	09 f4       	brne	.+2      	; 0x18de <Dio_vidTogglePin+0x26>
    18dc:	40 c0       	rjmp	.+128    	; 0x195e <Dio_vidTogglePin+0xa6>
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	9c 81       	ldd	r25, Y+4	; 0x04
    18e2:	82 30       	cpi	r24, 0x02	; 2
    18e4:	91 05       	cpc	r25, r1
    18e6:	34 f4       	brge	.+12     	; 0x18f4 <Dio_vidTogglePin+0x3c>
    18e8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ea:	3c 81       	ldd	r19, Y+4	; 0x04
    18ec:	21 15       	cp	r18, r1
    18ee:	31 05       	cpc	r19, r1
    18f0:	71 f0       	breq	.+28     	; 0x190e <Dio_vidTogglePin+0x56>
    18f2:	aa c0       	rjmp	.+340    	; 0x1a48 <Dio_vidTogglePin+0x190>
    18f4:	4b 81       	ldd	r20, Y+3	; 0x03
    18f6:	5c 81       	ldd	r21, Y+4	; 0x04
    18f8:	42 30       	cpi	r20, 0x02	; 2
    18fa:	51 05       	cpc	r21, r1
    18fc:	09 f4       	brne	.+2      	; 0x1900 <Dio_vidTogglePin+0x48>
    18fe:	57 c0       	rjmp	.+174    	; 0x19ae <Dio_vidTogglePin+0xf6>
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	83 30       	cpi	r24, 0x03	; 3
    1906:	91 05       	cpc	r25, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <Dio_vidTogglePin+0x54>
    190a:	78 c0       	rjmp	.+240    	; 0x19fc <Dio_vidTogglePin+0x144>
    190c:	9d c0       	rjmp	.+314    	; 0x1a48 <Dio_vidTogglePin+0x190>
	{
	case Dio_PORTA:
		if(Get_Bit(DDRA, Pin) == 1)
    190e:	ea e3       	ldi	r30, 0x3A	; 58
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a9 01       	movw	r20, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <Dio_vidTogglePin+0x6e>
    1922:	55 95       	asr	r21
    1924:	47 95       	ror	r20
    1926:	8a 95       	dec	r24
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <Dio_vidTogglePin+0x6a>
    192a:	ca 01       	movw	r24, r20
    192c:	81 70       	andi	r24, 0x01	; 1
    192e:	90 70       	andi	r25, 0x00	; 0
    1930:	88 23       	and	r24, r24
    1932:	09 f4       	brne	.+2      	; 0x1936 <Dio_vidTogglePin+0x7e>
    1934:	89 c0       	rjmp	.+274    	; 0x1a48 <Dio_vidTogglePin+0x190>
		{
			Toggle_Bit(PORTA, Pin);
    1936:	ab e3       	ldi	r26, 0x3B	; 59
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	eb e3       	ldi	r30, 0x3B	; 59
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	48 2f       	mov	r20, r24
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 2e       	mov	r0, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <Dio_vidTogglePin+0x9c>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	0a 94       	dec	r0
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <Dio_vidTogglePin+0x98>
    1958:	84 27       	eor	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	75 c0       	rjmp	.+234    	; 0x1a48 <Dio_vidTogglePin+0x190>
		{
			/*Fire an error or do nothing*/
		}
		break;
	case Dio_PORTB:
		if(Get_Bit(DDRB, Pin) == 1)
    195e:	e7 e3       	ldi	r30, 0x37	; 55
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a9 01       	movw	r20, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <Dio_vidTogglePin+0xbe>
    1972:	55 95       	asr	r21
    1974:	47 95       	ror	r20
    1976:	8a 95       	dec	r24
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <Dio_vidTogglePin+0xba>
    197a:	ca 01       	movw	r24, r20
    197c:	81 70       	andi	r24, 0x01	; 1
    197e:	90 70       	andi	r25, 0x00	; 0
    1980:	88 23       	and	r24, r24
    1982:	09 f4       	brne	.+2      	; 0x1986 <Dio_vidTogglePin+0xce>
    1984:	61 c0       	rjmp	.+194    	; 0x1a48 <Dio_vidTogglePin+0x190>
		{
			Toggle_Bit(PORTB, Pin);
    1986:	a8 e3       	ldi	r26, 0x38	; 56
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e8 e3       	ldi	r30, 0x38	; 56
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 2e       	mov	r0, r18
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <Dio_vidTogglePin+0xec>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <Dio_vidTogglePin+0xe8>
    19a8:	84 27       	eor	r24, r20
    19aa:	8c 93       	st	X, r24
    19ac:	4d c0       	rjmp	.+154    	; 0x1a48 <Dio_vidTogglePin+0x190>
		{
			/*Fire an error or do nothing*/
		}
		break;
	case Dio_PORTC:
			if(Get_Bit(DDRB, Pin) == 1)
    19ae:	e7 e3       	ldi	r30, 0x37	; 55
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	88 2f       	mov	r24, r24
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	a9 01       	movw	r20, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <Dio_vidTogglePin+0x10e>
    19c2:	55 95       	asr	r21
    19c4:	47 95       	ror	r20
    19c6:	8a 95       	dec	r24
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <Dio_vidTogglePin+0x10a>
    19ca:	ca 01       	movw	r24, r20
    19cc:	81 70       	andi	r24, 0x01	; 1
    19ce:	90 70       	andi	r25, 0x00	; 0
    19d0:	88 23       	and	r24, r24
    19d2:	d1 f1       	breq	.+116    	; 0x1a48 <Dio_vidTogglePin+0x190>
			{
				Toggle_Bit(PORTB, Pin);
    19d4:	a8 e3       	ldi	r26, 0x38	; 56
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e8 e3       	ldi	r30, 0x38	; 56
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <Dio_vidTogglePin+0x13a>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <Dio_vidTogglePin+0x136>
    19f6:	84 27       	eor	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	26 c0       	rjmp	.+76     	; 0x1a48 <Dio_vidTogglePin+0x190>
			{
				/*Fire an error or do nothing*/
			}
			break;
	case Dio_PORTD:
			if(Get_Bit(DDRB, Pin) == 1)
    19fc:	e7 e3       	ldi	r30, 0x37	; 55
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	88 2f       	mov	r24, r24
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a9 01       	movw	r20, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <Dio_vidTogglePin+0x15c>
    1a10:	55 95       	asr	r21
    1a12:	47 95       	ror	r20
    1a14:	8a 95       	dec	r24
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <Dio_vidTogglePin+0x158>
    1a18:	ca 01       	movw	r24, r20
    1a1a:	81 70       	andi	r24, 0x01	; 1
    1a1c:	90 70       	andi	r25, 0x00	; 0
    1a1e:	88 23       	and	r24, r24
    1a20:	99 f0       	breq	.+38     	; 0x1a48 <Dio_vidTogglePin+0x190>
			{
				Toggle_Bit(PORTB, Pin);
    1a22:	a8 e3       	ldi	r26, 0x38	; 56
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e8 e3       	ldi	r30, 0x38	; 56
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <Dio_vidTogglePin+0x188>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <Dio_vidTogglePin+0x184>
    1a44:	84 27       	eor	r24, r20
    1a46:	8c 93       	st	X, r24
			}
			break;


	}
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <ADC_vidInit>:
 * Input      : None
 * Output     : None
 * Last_Author: ALMALKY
 **************************************************************/
void ADC_vidInit(void)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
	/*Configure Prescalar (Division Factor = 1024)*/
	ADCSRA = (ADCSRA & 0xF8) | 0x07;
    1a5e:	a6 e2       	ldi	r26, 0x26	; 38
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e6 e2       	ldi	r30, 0x26	; 38
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	87 60       	ori	r24, 0x07	; 7
    1a6a:	8c 93       	st	X, r24

	/*Configure Vref (Internal Vref = VCC)*/
	ADMUX = (ADMUX &0x3F) | 0x40;
    1a6c:	a7 e2       	ldi	r26, 0x27	; 39
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e7 e2       	ldi	r30, 0x27	; 39
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8f 73       	andi	r24, 0x3F	; 63
    1a78:	80 64       	ori	r24, 0x40	; 64
    1a7a:	8c 93       	st	X, r24

	/*Configure Right ADjusted Result, No Interrupt, No Auto-Trigger*/
	Clear_Bit(ADMUX, 5);
    1a7c:	a7 e2       	ldi	r26, 0x27	; 39
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e7 e2       	ldi	r30, 0x27	; 39
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8f 7d       	andi	r24, 0xDF	; 223
    1a88:	8c 93       	st	X, r24
	Clear_Bit(ADCSRA, 3);
    1a8a:	a6 e2       	ldi	r26, 0x26	; 38
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e6 e2       	ldi	r30, 0x26	; 38
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	87 7f       	andi	r24, 0xF7	; 247
    1a96:	8c 93       	st	X, r24
	Clear_Bit(ADCSRA, 5);
    1a98:	a6 e2       	ldi	r26, 0x26	; 38
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e6 e2       	ldi	r30, 0x26	; 38
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8f 7d       	andi	r24, 0xDF	; 223
    1aa4:	8c 93       	st	X, r24

	/*Enable ADC module*/
	Set_Bit(ADCSRA, 7);
    1aa6:	a6 e2       	ldi	r26, 0x26	; 38
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e6 e2       	ldi	r30, 0x26	; 38
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	80 68       	ori	r24, 0x80	; 128
    1ab2:	8c 93       	st	X, r24
}
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <ADC_u16ReadChannel>:
 * Input      : Channel Number
 * Output     : Conversion Result
 * Last_Author: ALMALKY
 **************************************************************/
uint16_t ADC_u16ReadChannel(uint8_t Channel)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <ADC_u16ReadChannel+0x6>
    1ac0:	0f 92       	push	r0
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t Result = 0;
    1ac8:	1a 82       	std	Y+2, r1	; 0x02
    1aca:	19 82       	std	Y+1, r1	; 0x01

	/*Check if the ADC is currently running a conversion*/
	if (Get_Bit(ADCSRA, 6) == 0)
    1acc:	e6 e2       	ldi	r30, 0x26	; 38
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	82 95       	swap	r24
    1ad4:	86 95       	lsr	r24
    1ad6:	86 95       	lsr	r24
    1ad8:	83 70       	andi	r24, 0x03	; 3
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	81 70       	andi	r24, 0x01	; 1
    1ae0:	90 70       	andi	r25, 0x00	; 0
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	d1 f5       	brne	.+116    	; 0x1b5a <ADC_u16ReadChannel+0xa0>
	{
		if (Channel >=1 && Channel <= 8)
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	88 23       	and	r24, r24
    1aea:	b9 f1       	breq	.+110    	; 0x1b5a <ADC_u16ReadChannel+0xa0>
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	89 30       	cpi	r24, 0x09	; 9
    1af0:	a0 f5       	brcc	.+104    	; 0x1b5a <ADC_u16ReadChannel+0xa0>
		{
			/*Select the required channel*/
			ADMUX = (ADMUX & 0xE0) | (Channel - 1);
    1af2:	a7 e2       	ldi	r26, 0x27	; 39
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e7 e2       	ldi	r30, 0x27	; 39
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	98 2f       	mov	r25, r24
    1afe:	90 7e       	andi	r25, 0xE0	; 224
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	81 50       	subi	r24, 0x01	; 1
    1b04:	89 2b       	or	r24, r25
    1b06:	8c 93       	st	X, r24

			/*Start Conversion on the select channel*/
			Set_Bit(ADCSRA, 6);
    1b08:	a6 e2       	ldi	r26, 0x26	; 38
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e6 e2       	ldi	r30, 0x26	; 38
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	80 64       	ori	r24, 0x40	; 64
    1b14:	8c 93       	st	X, r24

			/*Wait for the conversion to finish*/
			while(Get_Bit(ADCSRA, 6) != 0)
    1b16:	e6 e2       	ldi	r30, 0x26	; 38
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	82 95       	swap	r24
    1b1e:	86 95       	lsr	r24
    1b20:	86 95       	lsr	r24
    1b22:	83 70       	andi	r24, 0x03	; 3
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	81 70       	andi	r24, 0x01	; 1
    1b2a:	90 70       	andi	r25, 0x00	; 0
    1b2c:	88 23       	and	r24, r24
    1b2e:	99 f7       	brne	.-26     	; 0x1b16 <ADC_u16ReadChannel+0x5c>
			{

			}

			/*Read the lower segment of the result first*/
			Result = ADCL;
    1b30:	e4 e2       	ldi	r30, 0x24	; 36
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01

			/*Read the higher segment of the result*/
			Result |= (ADCH << 8);
    1b3e:	e5 e2       	ldi	r30, 0x25	; 37
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	98 2f       	mov	r25, r24
    1b4a:	88 27       	eor	r24, r24
    1b4c:	9c 01       	movw	r18, r24
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	82 2b       	or	r24, r18
    1b54:	93 2b       	or	r25, r19
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Result;
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <LCD_vidInit>:

 * Input      : None
 * Output     : None
 * *********************************************/
void LCD_vidInit(void)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	e8 97       	sbiw	r28, 0x38	; 56
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 ef       	ldi	r26, 0xF0	; 240
    1b84:	b1 e4       	ldi	r27, 0x41	; 65
    1b86:	8d ab       	std	Y+53, r24	; 0x35
    1b88:	9e ab       	std	Y+54, r25	; 0x36
    1b8a:	af ab       	std	Y+55, r26	; 0x37
    1b8c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b90:	7e a9       	ldd	r23, Y+54	; 0x36
    1b92:	8f a9       	ldd	r24, Y+55	; 0x37
    1b94:	98 ad       	ldd	r25, Y+56	; 0x38
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a ef       	ldi	r20, 0xFA	; 250
    1b9c:	54 e4       	ldi	r21, 0x44	; 68
    1b9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	89 ab       	std	Y+49, r24	; 0x31
    1ba8:	9a ab       	std	Y+50, r25	; 0x32
    1baa:	ab ab       	std	Y+51, r26	; 0x33
    1bac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bae:	69 a9       	ldd	r22, Y+49	; 0x31
    1bb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <LCD_vidInit+0x66>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	98 ab       	std	Y+48, r25	; 0x30
    1bcc:	8f a7       	std	Y+47, r24	; 0x2f
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <LCD_vidInit+0xe4>
	else if (__tmp > 65535)
    1bd0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bd6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <LCD_vidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	6d a9       	ldd	r22, Y+53	; 0x35
    1bea:	7e a9       	ldd	r23, Y+54	; 0x36
    1bec:	8f a9       	ldd	r24, Y+55	; 0x37
    1bee:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	98 ab       	std	Y+48, r25	; 0x30
    1c0e:	8f a7       	std	Y+47, r24	; 0x2f
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <LCD_vidInit+0xc6>
    1c12:	88 ec       	ldi	r24, 0xC8	; 200
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9e a7       	std	Y+46, r25	; 0x2e
    1c18:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c1a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c1c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_vidInit+0xb4>
    1c22:	9e a7       	std	Y+46, r25	; 0x2e
    1c24:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c28:	98 a9       	ldd	r25, Y+48	; 0x30
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	98 ab       	std	Y+48, r25	; 0x30
    1c2e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c32:	98 a9       	ldd	r25, Y+48	; 0x30
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <LCD_vidInit+0xa8>
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <LCD_vidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c40:	9c a9       	ldd	r25, Y+52	; 0x34
    1c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	98 ab       	std	Y+48, r25	; 0x30
    1c4c:	8f a7       	std	Y+47, r24	; 0x2f
    1c4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c50:	98 a9       	ldd	r25, Y+48	; 0x30
    1c52:	9c a7       	std	Y+44, r25	; 0x2c
    1c54:	8b a7       	std	Y+43, r24	; 0x2b
    1c56:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c58:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_vidInit+0xf0>
    1c5e:	9c a7       	std	Y+44, r25	; 0x2c
    1c60:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait for 30ms*/
	_delay_ms(30);

	/*Send Funcltion_Set Command*/
	LCD_vidWriteCommand(LCD_FUNCTION_SET);
    1c62:	88 e3       	ldi	r24, 0x38	; 56
    1c64:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_vidWriteCommand>
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a0 e8       	ldi	r26, 0x80	; 128
    1c6e:	bf e3       	ldi	r27, 0x3F	; 63
    1c70:	8f a3       	std	Y+39, r24	; 0x27
    1c72:	98 a7       	std	Y+40, r25	; 0x28
    1c74:	a9 a7       	std	Y+41, r26	; 0x29
    1c76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c78:	6f a1       	ldd	r22, Y+39	; 0x27
    1c7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4a ef       	ldi	r20, 0xFA	; 250
    1c86:	54 e4       	ldi	r21, 0x44	; 68
    1c88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	8b a3       	std	Y+35, r24	; 0x23
    1c92:	9c a3       	std	Y+36, r25	; 0x24
    1c94:	ad a3       	std	Y+37, r26	; 0x25
    1c96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c98:	6b a1       	ldd	r22, Y+35	; 0x23
    1c9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e8       	ldi	r20, 0x80	; 128
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cac:	88 23       	and	r24, r24
    1cae:	2c f4       	brge	.+10     	; 0x1cba <LCD_vidInit+0x150>
		__ticks = 1;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9a a3       	std	Y+34, r25	; 0x22
    1cb6:	89 a3       	std	Y+33, r24	; 0x21
    1cb8:	3f c0       	rjmp	.+126    	; 0x1d38 <LCD_vidInit+0x1ce>
	else if (__tmp > 65535)
    1cba:	6b a1       	ldd	r22, Y+35	; 0x23
    1cbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	3f ef       	ldi	r19, 0xFF	; 255
    1cc6:	4f e7       	ldi	r20, 0x7F	; 127
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cce:	18 16       	cp	r1, r24
    1cd0:	4c f5       	brge	.+82     	; 0x1d24 <LCD_vidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd2:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd4:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd6:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e2       	ldi	r20, 0x20	; 32
    1ce0:	51 e4       	ldi	r21, 0x41	; 65
    1ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9a a3       	std	Y+34, r25	; 0x22
    1cf8:	89 a3       	std	Y+33, r24	; 0x21
    1cfa:	0f c0       	rjmp	.+30     	; 0x1d1a <LCD_vidInit+0x1b0>
    1cfc:	88 ec       	ldi	r24, 0xC8	; 200
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	98 a3       	std	Y+32, r25	; 0x20
    1d02:	8f 8f       	std	Y+31, r24	; 0x1f
    1d04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d06:	98 a1       	ldd	r25, Y+32	; 0x20
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_vidInit+0x19e>
    1d0c:	98 a3       	std	Y+32, r25	; 0x20
    1d0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d10:	89 a1       	ldd	r24, Y+33	; 0x21
    1d12:	9a a1       	ldd	r25, Y+34	; 0x22
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	9a a3       	std	Y+34, r25	; 0x22
    1d18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	69 f7       	brne	.-38     	; 0x1cfc <LCD_vidInit+0x192>
    1d22:	14 c0       	rjmp	.+40     	; 0x1d4c <LCD_vidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d24:	6b a1       	ldd	r22, Y+35	; 0x23
    1d26:	7c a1       	ldd	r23, Y+36	; 0x24
    1d28:	8d a1       	ldd	r24, Y+37	; 0x25
    1d2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	9a a3       	std	Y+34, r25	; 0x22
    1d36:	89 a3       	std	Y+33, r24	; 0x21
    1d38:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1d40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <LCD_vidInit+0x1da>
    1d48:	9e 8f       	std	Y+30, r25	; 0x1e
    1d4a:	8d 8f       	std	Y+29, r24	; 0x1d

	/*Wait for 1ms*/
	_delay_ms(1);

	/*Send Display Status Command*/
	LCD_vidWriteCommand(LCD_DISPLAY_ON);
    1d4c:	8c e0       	ldi	r24, 0x0C	; 12
    1d4e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_vidWriteCommand>
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a0 e8       	ldi	r26, 0x80	; 128
    1d58:	bf e3       	ldi	r27, 0x3F	; 63
    1d5a:	89 8f       	std	Y+25, r24	; 0x19
    1d5c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d5e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d62:	69 8d       	ldd	r22, Y+25	; 0x19
    1d64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a ef       	ldi	r20, 0xFA	; 250
    1d70:	54 e4       	ldi	r21, 0x44	; 68
    1d72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	8d 8b       	std	Y+21, r24	; 0x15
    1d7c:	9e 8b       	std	Y+22, r25	; 0x16
    1d7e:	af 8b       	std	Y+23, r26	; 0x17
    1d80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d82:	6d 89       	ldd	r22, Y+21	; 0x15
    1d84:	7e 89       	ldd	r23, Y+22	; 0x16
    1d86:	8f 89       	ldd	r24, Y+23	; 0x17
    1d88:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	5f e3       	ldi	r21, 0x3F	; 63
    1d92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d96:	88 23       	and	r24, r24
    1d98:	2c f4       	brge	.+10     	; 0x1da4 <LCD_vidInit+0x23a>
		__ticks = 1;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9c 8b       	std	Y+20, r25	; 0x14
    1da0:	8b 8b       	std	Y+19, r24	; 0x13
    1da2:	3f c0       	rjmp	.+126    	; 0x1e22 <LCD_vidInit+0x2b8>
	else if (__tmp > 65535)
    1da4:	6d 89       	ldd	r22, Y+21	; 0x15
    1da6:	7e 89       	ldd	r23, Y+22	; 0x16
    1da8:	8f 89       	ldd	r24, Y+23	; 0x17
    1daa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	57 e4       	ldi	r21, 0x47	; 71
    1db4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	4c f5       	brge	.+82     	; 0x1e0e <LCD_vidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1dbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e2       	ldi	r20, 0x20	; 32
    1dca:	51 e4       	ldi	r21, 0x41	; 65
    1dcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	9c 8b       	std	Y+20, r25	; 0x14
    1de2:	8b 8b       	std	Y+19, r24	; 0x13
    1de4:	0f c0       	rjmp	.+30     	; 0x1e04 <LCD_vidInit+0x29a>
    1de6:	88 ec       	ldi	r24, 0xC8	; 200
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	9a 8b       	std	Y+18, r25	; 0x12
    1dec:	89 8b       	std	Y+17, r24	; 0x11
    1dee:	89 89       	ldd	r24, Y+17	; 0x11
    1df0:	9a 89       	ldd	r25, Y+18	; 0x12
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <LCD_vidInit+0x288>
    1df6:	9a 8b       	std	Y+18, r25	; 0x12
    1df8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	9c 8b       	std	Y+20, r25	; 0x14
    1e02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e04:	8b 89       	ldd	r24, Y+19	; 0x13
    1e06:	9c 89       	ldd	r25, Y+20	; 0x14
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	69 f7       	brne	.-38     	; 0x1de6 <LCD_vidInit+0x27c>
    1e0c:	14 c0       	rjmp	.+40     	; 0x1e36 <LCD_vidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e10:	7e 89       	ldd	r23, Y+22	; 0x16
    1e12:	8f 89       	ldd	r24, Y+23	; 0x17
    1e14:	98 8d       	ldd	r25, Y+24	; 0x18
    1e16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9c 8b       	std	Y+20, r25	; 0x14
    1e20:	8b 8b       	std	Y+19, r24	; 0x13
    1e22:	8b 89       	ldd	r24, Y+19	; 0x13
    1e24:	9c 89       	ldd	r25, Y+20	; 0x14
    1e26:	98 8b       	std	Y+16, r25	; 0x10
    1e28:	8f 87       	std	Y+15, r24	; 0x0f
    1e2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2c:	98 89       	ldd	r25, Y+16	; 0x10
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <LCD_vidInit+0x2c4>
    1e32:	98 8b       	std	Y+16, r25	; 0x10
    1e34:	8f 87       	std	Y+15, r24	; 0x0f

	/*Wait for 1ms*/
	_delay_ms(1);

	/*Send Display_Clear Command*/
	LCD_vidWriteCommand(LCD_CLEAR);
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_vidWriteCommand>
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 e0       	ldi	r26, 0x00	; 0
    1e42:	b0 e4       	ldi	r27, 0x40	; 64
    1e44:	8b 87       	std	Y+11, r24	; 0x0b
    1e46:	9c 87       	std	Y+12, r25	; 0x0c
    1e48:	ad 87       	std	Y+13, r26	; 0x0d
    1e4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a ef       	ldi	r20, 0xFA	; 250
    1e5a:	54 e4       	ldi	r21, 0x44	; 68
    1e5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	8f 83       	std	Y+7, r24	; 0x07
    1e66:	98 87       	std	Y+8, r25	; 0x08
    1e68:	a9 87       	std	Y+9, r26	; 0x09
    1e6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <LCD_vidInit+0x324>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	8d 83       	std	Y+5, r24	; 0x05
    1e8c:	3f c0       	rjmp	.+126    	; 0x1f0c <LCD_vidInit+0x3a2>
	else if (__tmp > 65535)
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	4c f5       	brge	.+82     	; 0x1ef8 <LCD_vidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <LCD_vidInit+0x384>
    1ed0:	88 ec       	ldi	r24, 0xC8	; 200
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9c 83       	std	Y+4, r25	; 0x04
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_vidInit+0x372>
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <LCD_vidInit+0x366>
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <LCD_vidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    1efa:	78 85       	ldd	r23, Y+8	; 0x08
    1efc:	89 85       	ldd	r24, Y+9	; 0x09
    1efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	9a 83       	std	Y+2, r25	; 0x02
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_vidInit+0x3ae>
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for 2ms*/
	_delay_ms(2);

	/*Send the configured Entry Mode*/
	LCD_vidWriteCommand(LCD_ENTRY_MODE);
    1f20:	86 e0       	ldi	r24, 0x06	; 6
    1f22:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_vidWriteCommand>
}
    1f26:	e8 96       	adiw	r28, 0x38	; 56
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <LCD_vidWriteCommand>:
 * Input      : None
 * Output     : None
 * Last_Author: MALKY
 * **********************************************/
void LCD_vidWriteCommand(uint8_t Command)
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	6d 97       	sbiw	r28, 0x1d	; 29
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Clear RS Signal*/
	Dio_vidWritePin(Dio_PORTC, 0, Dio_Low);
    1f4e:	82 e0       	ldi	r24, 0x02	; 2
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Dio_vidWritePin>

	/*Write the Command to the Data Port*/
	Dio_vidWritePort(Dio_PORTB, Command);
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f5c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <Dio_vidWritePort>

	/*Set the Enable Signal*/
	Dio_vidWritePin(Dio_PORTC, 1, Dio_High);
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	61 e0       	ldi	r22, 0x01	; 1
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Dio_vidWritePin>
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	a0 e8       	ldi	r26, 0x80	; 128
    1f70:	bf e3       	ldi	r27, 0x3F	; 63
    1f72:	89 8f       	std	Y+25, r24	; 0x19
    1f74:	9a 8f       	std	Y+26, r25	; 0x1a
    1f76:	ab 8f       	std	Y+27, r26	; 0x1b
    1f78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	4a ef       	ldi	r20, 0xFA	; 250
    1f88:	54 e4       	ldi	r21, 0x44	; 68
    1f8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	8d 8b       	std	Y+21, r24	; 0x15
    1f94:	9e 8b       	std	Y+22, r25	; 0x16
    1f96:	af 8b       	std	Y+23, r26	; 0x17
    1f98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e8       	ldi	r20, 0x80	; 128
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fae:	88 23       	and	r24, r24
    1fb0:	2c f4       	brge	.+10     	; 0x1fbc <LCD_vidWriteCommand+0x84>
		__ticks = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9c 8b       	std	Y+20, r25	; 0x14
    1fb8:	8b 8b       	std	Y+19, r24	; 0x13
    1fba:	3f c0       	rjmp	.+126    	; 0x203a <LCD_vidWriteCommand+0x102>
	else if (__tmp > 65535)
    1fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	3f ef       	ldi	r19, 0xFF	; 255
    1fc8:	4f e7       	ldi	r20, 0x7F	; 127
    1fca:	57 e4       	ldi	r21, 0x47	; 71
    1fcc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd0:	18 16       	cp	r1, r24
    1fd2:	4c f5       	brge	.+82     	; 0x2026 <LCD_vidWriteCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e2       	ldi	r20, 0x20	; 32
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9c 8b       	std	Y+20, r25	; 0x14
    1ffa:	8b 8b       	std	Y+19, r24	; 0x13
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <LCD_vidWriteCommand+0xe4>
    1ffe:	88 ec       	ldi	r24, 0xC8	; 200
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9a 8b       	std	Y+18, r25	; 0x12
    2004:	89 8b       	std	Y+17, r24	; 0x11
    2006:	89 89       	ldd	r24, Y+17	; 0x11
    2008:	9a 89       	ldd	r25, Y+18	; 0x12
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_vidWriteCommand+0xd2>
    200e:	9a 8b       	std	Y+18, r25	; 0x12
    2010:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2012:	8b 89       	ldd	r24, Y+19	; 0x13
    2014:	9c 89       	ldd	r25, Y+20	; 0x14
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	9c 8b       	std	Y+20, r25	; 0x14
    201a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	8b 89       	ldd	r24, Y+19	; 0x13
    201e:	9c 89       	ldd	r25, Y+20	; 0x14
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f7       	brne	.-38     	; 0x1ffe <LCD_vidWriteCommand+0xc6>
    2024:	14 c0       	rjmp	.+40     	; 0x204e <LCD_vidWriteCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2026:	6d 89       	ldd	r22, Y+21	; 0x15
    2028:	7e 89       	ldd	r23, Y+22	; 0x16
    202a:	8f 89       	ldd	r24, Y+23	; 0x17
    202c:	98 8d       	ldd	r25, Y+24	; 0x18
    202e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9c 8b       	std	Y+20, r25	; 0x14
    2038:	8b 8b       	std	Y+19, r24	; 0x13
    203a:	8b 89       	ldd	r24, Y+19	; 0x13
    203c:	9c 89       	ldd	r25, Y+20	; 0x14
    203e:	98 8b       	std	Y+16, r25	; 0x10
    2040:	8f 87       	std	Y+15, r24	; 0x0f
    2042:	8f 85       	ldd	r24, Y+15	; 0x0f
    2044:	98 89       	ldd	r25, Y+16	; 0x10
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_vidWriteCommand+0x10e>
    204a:	98 8b       	std	Y+16, r25	; 0x10
    204c:	8f 87       	std	Y+15, r24	; 0x0f

	/*Wait for a while (1ms)*/
	_delay_ms(1);

	/*Clear Enable Signal*/
	Dio_vidWritePin(Dio_PORTC, 1, Dio_Low);
    204e:	82 e0       	ldi	r24, 0x02	; 2
    2050:	61 e0       	ldi	r22, 0x01	; 1
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Dio_vidWritePin>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e2       	ldi	r26, 0x20	; 32
    205e:	b1 e4       	ldi	r27, 0x41	; 65
    2060:	8b 87       	std	Y+11, r24	; 0x0b
    2062:	9c 87       	std	Y+12, r25	; 0x0c
    2064:	ad 87       	std	Y+13, r26	; 0x0d
    2066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8f 83       	std	Y+7, r24	; 0x07
    2082:	98 87       	std	Y+8, r25	; 0x08
    2084:	a9 87       	std	Y+9, r26	; 0x09
    2086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <LCD_vidWriteCommand+0x172>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <LCD_vidWriteCommand+0x1f0>
	else if (__tmp > 65535)
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <LCD_vidWriteCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <LCD_vidWriteCommand+0x1d2>
    20ec:	88 ec       	ldi	r24, 0xC8	; 200
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <LCD_vidWriteCommand+0x1c0>
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <LCD_vidWriteCommand+0x1b4>
    2112:	14 c0       	rjmp	.+40     	; 0x213c <LCD_vidWriteCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	6f 81       	ldd	r22, Y+7	; 0x07
    2116:	78 85       	ldd	r23, Y+8	; 0x08
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LCD_vidWriteCommand+0x1fc>
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for the LCD to finish executing*/
	_delay_ms(10);
}
    213c:	6d 96       	adiw	r28, 0x1d	; 29
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <LCD_vidWriteData>:
 * Description: Shall Initialize LCD Module
 * Input      : None
 * Output     : None
 * *********************************************/
void LCD_vidWriteData(uint8_t Data)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	6d 97       	sbiw	r28, 0x1d	; 29
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set RS Signal*/
	Dio_vidWritePin(Dio_PORTC, 0, Dio_High);
    2164:	82 e0       	ldi	r24, 0x02	; 2
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Dio_vidWritePin>


	/*Write the Data to the Data Port*/
	Dio_vidWritePort(Dio_PORTB, Data);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2172:	0e 94 4a 0a 	call	0x1494	; 0x1494 <Dio_vidWritePort>

	/*Set the Enable Signal*/
	Dio_vidWritePin(Dio_PORTC, 1, Dio_High);
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	61 e0       	ldi	r22, 0x01	; 1
    217a:	41 e0       	ldi	r20, 0x01	; 1
    217c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Dio_vidWritePin>
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a0 e8       	ldi	r26, 0x80	; 128
    2186:	bf e3       	ldi	r27, 0x3F	; 63
    2188:	89 8f       	std	Y+25, r24	; 0x19
    218a:	9a 8f       	std	Y+26, r25	; 0x1a
    218c:	ab 8f       	std	Y+27, r26	; 0x1b
    218e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2190:	69 8d       	ldd	r22, Y+25	; 0x19
    2192:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	4a ef       	ldi	r20, 0xFA	; 250
    219e:	54 e4       	ldi	r21, 0x44	; 68
    21a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	8d 8b       	std	Y+21, r24	; 0x15
    21aa:	9e 8b       	std	Y+22, r25	; 0x16
    21ac:	af 8b       	std	Y+23, r26	; 0x17
    21ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b0:	6d 89       	ldd	r22, Y+21	; 0x15
    21b2:	7e 89       	ldd	r23, Y+22	; 0x16
    21b4:	8f 89       	ldd	r24, Y+23	; 0x17
    21b6:	98 8d       	ldd	r25, Y+24	; 0x18
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e8       	ldi	r20, 0x80	; 128
    21be:	5f e3       	ldi	r21, 0x3F	; 63
    21c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21c4:	88 23       	and	r24, r24
    21c6:	2c f4       	brge	.+10     	; 0x21d2 <LCD_vidWriteData+0x84>
		__ticks = 1;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9c 8b       	std	Y+20, r25	; 0x14
    21ce:	8b 8b       	std	Y+19, r24	; 0x13
    21d0:	3f c0       	rjmp	.+126    	; 0x2250 <LCD_vidWriteData+0x102>
	else if (__tmp > 65535)
    21d2:	6d 89       	ldd	r22, Y+21	; 0x15
    21d4:	7e 89       	ldd	r23, Y+22	; 0x16
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	3f ef       	ldi	r19, 0xFF	; 255
    21de:	4f e7       	ldi	r20, 0x7F	; 127
    21e0:	57 e4       	ldi	r21, 0x47	; 71
    21e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21e6:	18 16       	cp	r1, r24
    21e8:	4c f5       	brge	.+82     	; 0x223c <LCD_vidWriteData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ea:	69 8d       	ldd	r22, Y+25	; 0x19
    21ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e2       	ldi	r20, 0x20	; 32
    21f8:	51 e4       	ldi	r21, 0x41	; 65
    21fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	9c 8b       	std	Y+20, r25	; 0x14
    2210:	8b 8b       	std	Y+19, r24	; 0x13
    2212:	0f c0       	rjmp	.+30     	; 0x2232 <LCD_vidWriteData+0xe4>
    2214:	88 ec       	ldi	r24, 0xC8	; 200
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9a 8b       	std	Y+18, r25	; 0x12
    221a:	89 8b       	std	Y+17, r24	; 0x11
    221c:	89 89       	ldd	r24, Y+17	; 0x11
    221e:	9a 89       	ldd	r25, Y+18	; 0x12
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <LCD_vidWriteData+0xd2>
    2224:	9a 8b       	std	Y+18, r25	; 0x12
    2226:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2228:	8b 89       	ldd	r24, Y+19	; 0x13
    222a:	9c 89       	ldd	r25, Y+20	; 0x14
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	9c 8b       	std	Y+20, r25	; 0x14
    2230:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2232:	8b 89       	ldd	r24, Y+19	; 0x13
    2234:	9c 89       	ldd	r25, Y+20	; 0x14
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	69 f7       	brne	.-38     	; 0x2214 <LCD_vidWriteData+0xc6>
    223a:	14 c0       	rjmp	.+40     	; 0x2264 <LCD_vidWriteData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223c:	6d 89       	ldd	r22, Y+21	; 0x15
    223e:	7e 89       	ldd	r23, Y+22	; 0x16
    2240:	8f 89       	ldd	r24, Y+23	; 0x17
    2242:	98 8d       	ldd	r25, Y+24	; 0x18
    2244:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9c 8b       	std	Y+20, r25	; 0x14
    224e:	8b 8b       	std	Y+19, r24	; 0x13
    2250:	8b 89       	ldd	r24, Y+19	; 0x13
    2252:	9c 89       	ldd	r25, Y+20	; 0x14
    2254:	98 8b       	std	Y+16, r25	; 0x10
    2256:	8f 87       	std	Y+15, r24	; 0x0f
    2258:	8f 85       	ldd	r24, Y+15	; 0x0f
    225a:	98 89       	ldd	r25, Y+16	; 0x10
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <LCD_vidWriteData+0x10e>
    2260:	98 8b       	std	Y+16, r25	; 0x10
    2262:	8f 87       	std	Y+15, r24	; 0x0f

	/*Wait for a while (1ms)*/
	_delay_ms(1);

	/*Clear Enable Signal*/
	Dio_vidWritePin(Dio_PORTC, 1, Dio_Low);
    2264:	82 e0       	ldi	r24, 0x02	; 2
    2266:	61 e0       	ldi	r22, 0x01	; 1
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <Dio_vidWritePin>
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	a0 e2       	ldi	r26, 0x20	; 32
    2274:	b1 e4       	ldi	r27, 0x41	; 65
    2276:	8b 87       	std	Y+11, r24	; 0x0b
    2278:	9c 87       	std	Y+12, r25	; 0x0c
    227a:	ad 87       	std	Y+13, r26	; 0x0d
    227c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2280:	7c 85       	ldd	r23, Y+12	; 0x0c
    2282:	8d 85       	ldd	r24, Y+13	; 0x0d
    2284:	9e 85       	ldd	r25, Y+14	; 0x0e
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	4a ef       	ldi	r20, 0xFA	; 250
    228c:	54 e4       	ldi	r21, 0x44	; 68
    228e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8f 83       	std	Y+7, r24	; 0x07
    2298:	98 87       	std	Y+8, r25	; 0x08
    229a:	a9 87       	std	Y+9, r26	; 0x09
    229c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e8       	ldi	r20, 0x80	; 128
    22ac:	5f e3       	ldi	r21, 0x3F	; 63
    22ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22b2:	88 23       	and	r24, r24
    22b4:	2c f4       	brge	.+10     	; 0x22c0 <LCD_vidWriteData+0x172>
		__ticks = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	3f c0       	rjmp	.+126    	; 0x233e <LCD_vidWriteData+0x1f0>
	else if (__tmp > 65535)
    22c0:	6f 81       	ldd	r22, Y+7	; 0x07
    22c2:	78 85       	ldd	r23, Y+8	; 0x08
    22c4:	89 85       	ldd	r24, Y+9	; 0x09
    22c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	3f ef       	ldi	r19, 0xFF	; 255
    22cc:	4f e7       	ldi	r20, 0x7F	; 127
    22ce:	57 e4       	ldi	r21, 0x47	; 71
    22d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22d4:	18 16       	cp	r1, r24
    22d6:	4c f5       	brge	.+82     	; 0x232a <LCD_vidWriteData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22da:	7c 85       	ldd	r23, Y+12	; 0x0c
    22dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22de:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e2       	ldi	r20, 0x20	; 32
    22e6:	51 e4       	ldi	r21, 0x41	; 65
    22e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
    2300:	0f c0       	rjmp	.+30     	; 0x2320 <LCD_vidWriteData+0x1d2>
    2302:	88 ec       	ldi	r24, 0xC8	; 200
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9c 83       	std	Y+4, r25	; 0x04
    2308:	8b 83       	std	Y+3, r24	; 0x03
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <LCD_vidWriteData+0x1c0>
    2312:	9c 83       	std	Y+4, r25	; 0x04
    2314:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	9e 81       	ldd	r25, Y+6	; 0x06
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	69 f7       	brne	.-38     	; 0x2302 <LCD_vidWriteData+0x1b4>
    2328:	14 c0       	rjmp	.+40     	; 0x2352 <LCD_vidWriteData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <LCD_vidWriteData+0x1fc>
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for the LCD to finish executing*/
	_delay_ms(10);
}
    2352:	6d 96       	adiw	r28, 0x1d	; 29
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <LCD_vidGoTo>:
 * Description: Shall Initialize LCD Module
 * Input      : None
 * Output     : None
 * *********************************************/
void LCD_vidGoTo(uint8_t Line, uint8_t Column)
{
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	00 d0       	rcall	.+0      	; 0x236a <LCD_vidGoTo+0x6>
    236a:	00 d0       	rcall	.+0      	; 0x236c <LCD_vidGoTo+0x8>
    236c:	0f 92       	push	r0
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	8a 83       	std	Y+2, r24	; 0x02
    2374:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t LineBase ;

	if (Column >= 1 && Column <= 16)
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	88 23       	and	r24, r24
    237a:	e9 f0       	breq	.+58     	; 0x23b6 <LCD_vidGoTo+0x52>
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	81 31       	cpi	r24, 0x11	; 17
    2380:	d0 f4       	brcc	.+52     	; 0x23b6 <LCD_vidGoTo+0x52>
	{
		switch(Line)
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	28 2f       	mov	r18, r24
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	3d 83       	std	Y+5, r19	; 0x05
    238a:	2c 83       	std	Y+4, r18	; 0x04
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	9d 81       	ldd	r25, Y+5	; 0x05
    2390:	81 30       	cpi	r24, 0x01	; 1
    2392:	91 05       	cpc	r25, r1
    2394:	31 f0       	breq	.+12     	; 0x23a2 <LCD_vidGoTo+0x3e>
    2396:	2c 81       	ldd	r18, Y+4	; 0x04
    2398:	3d 81       	ldd	r19, Y+5	; 0x05
    239a:	22 30       	cpi	r18, 0x02	; 2
    239c:	31 05       	cpc	r19, r1
    239e:	19 f0       	breq	.+6      	; 0x23a6 <LCD_vidGoTo+0x42>
    23a0:	04 c0       	rjmp	.+8      	; 0x23aa <LCD_vidGoTo+0x46>
		{
		case 1:
			LineBase = 0x00;
    23a2:	19 82       	std	Y+1, r1	; 0x01
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <LCD_vidGoTo+0x46>
			break;
		case 2:
			LineBase = 0x40;
    23a6:	80 e4       	ldi	r24, 0x40	; 64
    23a8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

		LCD_vidWriteCommand(LCD_MOVE_CURSOR + (LineBase + (Column - 1)));
    23aa:	9b 81       	ldd	r25, Y+3	; 0x03
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	89 0f       	add	r24, r25
    23b0:	81 58       	subi	r24, 0x81	; 129
    23b2:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_vidWriteCommand>
	}
}
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <LCD_vidWriteString>:
 * Description: Shall Initialize LCD Module
 * Input      : None
 * Output     : None
 * *********************************************/
void LCD_vidWriteString(uint16_t * Message)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <LCD_vidWriteString+0x6>
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	0b c0       	rjmp	.+22     	; 0x23ec <LCD_vidWriteString+0x26>
	while((*Message) != '\0')
	{
		LCD_vidWriteData(*Message);
    23d6:	e9 81       	ldd	r30, Y+1	; 0x01
    23d8:	fa 81       	ldd	r31, Y+2	; 0x02
    23da:	80 81       	ld	r24, Z
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_vidWriteData>

		Message++;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	02 96       	adiw	r24, 0x02	; 2
    23e8:	9a 83       	std	Y+2, r25	; 0x02
    23ea:	89 83       	std	Y+1, r24	; 0x01
 * Input      : None
 * Output     : None
 * *********************************************/
void LCD_vidWriteString(uint16_t * Message)
{
	while((*Message) != '\0')
    23ec:	e9 81       	ldd	r30, Y+1	; 0x01
    23ee:	fa 81       	ldd	r31, Y+2	; 0x02
    23f0:	80 81       	ld	r24, Z
    23f2:	91 81       	ldd	r25, Z+1	; 0x01
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	79 f7       	brne	.-34     	; 0x23d6 <LCD_vidWriteString+0x10>
	{
		LCD_vidWriteData(*Message);

		Message++;
	}
}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <LCD_vidPrintNumber>:
 * Input      : None
 * Output     : None
 * Last_Author: MALKY
 * *********************************************/
void LCD_vidPrintNumber(uint32_t Number)
{
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	2c 97       	sbiw	r28, 0x0c	; 12
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	69 87       	std	Y+9, r22	; 0x09
    2418:	7a 87       	std	Y+10, r23	; 0x0a
    241a:	8b 87       	std	Y+11, r24	; 0x0b
    241c:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t Factor = 1;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	a0 e0       	ldi	r26, 0x00	; 0
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	8d 83       	std	Y+5, r24	; 0x05
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	af 83       	std	Y+7, r26	; 0x07
    242c:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t Temp;

	Temp = Number / 10;
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	ab 85       	ldd	r26, Y+11	; 0x0b
    2434:	bc 85       	ldd	r27, Y+12	; 0x0c
    2436:	2a e0       	ldi	r18, 0x0A	; 10
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__udivmodsi4>
    2446:	da 01       	movw	r26, r20
    2448:	c9 01       	movw	r24, r18
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	9a 83       	std	Y+2, r25	; 0x02
    244e:	ab 83       	std	Y+3, r26	; 0x03
    2450:	bc 83       	std	Y+4, r27	; 0x04
    2452:	24 c0       	rjmp	.+72     	; 0x249c <LCD_vidPrintNumber+0x9a>
	while (Temp != 0)
	{
		Temp = Temp / 10;
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	9a 81       	ldd	r25, Y+2	; 0x02
    2458:	ab 81       	ldd	r26, Y+3	; 0x03
    245a:	bc 81       	ldd	r27, Y+4	; 0x04
    245c:	2a e0       	ldi	r18, 0x0A	; 10
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__udivmodsi4>
    246c:	da 01       	movw	r26, r20
    246e:	c9 01       	movw	r24, r18
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	9a 83       	std	Y+2, r25	; 0x02
    2474:	ab 83       	std	Y+3, r26	; 0x03
    2476:	bc 83       	std	Y+4, r27	; 0x04
		Factor = Factor * 10;
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	9e 81       	ldd	r25, Y+6	; 0x06
    247c:	af 81       	ldd	r26, Y+7	; 0x07
    247e:	b8 85       	ldd	r27, Y+8	; 0x08
    2480:	2a e0       	ldi	r18, 0x0A	; 10
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__mulsi3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	8d 83       	std	Y+5, r24	; 0x05
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	af 83       	std	Y+7, r26	; 0x07
    249a:	b8 87       	std	Y+8, r27	; 0x08
{
	uint32_t Factor = 1;
	uint32_t Temp;

	Temp = Number / 10;
	while (Temp != 0)
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	ab 81       	ldd	r26, Y+3	; 0x03
    24a2:	bc 81       	ldd	r27, Y+4	; 0x04
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	a1 05       	cpc	r26, r1
    24a8:	b1 05       	cpc	r27, r1
    24aa:	a1 f6       	brne	.-88     	; 0x2454 <LCD_vidPrintNumber+0x52>
	{
		Temp = Temp / 10;
		Factor = Factor * 10;
	}

	Temp = Number;
    24ac:	89 85       	ldd	r24, Y+9	; 0x09
    24ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b0:	ab 85       	ldd	r26, Y+11	; 0x0b
    24b2:	bc 85       	ldd	r27, Y+12	; 0x0c
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	9a 83       	std	Y+2, r25	; 0x02
    24b8:	ab 83       	std	Y+3, r26	; 0x03
    24ba:	bc 83       	std	Y+4, r27	; 0x04
    24bc:	35 c0       	rjmp	.+106    	; 0x2528 <LCD_vidPrintNumber+0x126>
	while(Temp != 0)
	{
		LCD_vidWriteData((Temp / Factor) + 0x30);
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	ab 81       	ldd	r26, Y+3	; 0x03
    24c4:	bc 81       	ldd	r27, Y+4	; 0x04
    24c6:	2d 81       	ldd	r18, Y+5	; 0x05
    24c8:	3e 81       	ldd	r19, Y+6	; 0x06
    24ca:	4f 81       	ldd	r20, Y+7	; 0x07
    24cc:	58 85       	ldd	r21, Y+8	; 0x08
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__udivmodsi4>
    24d6:	da 01       	movw	r26, r20
    24d8:	c9 01       	movw	r24, r18
    24da:	80 5d       	subi	r24, 0xD0	; 208
    24dc:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_vidWriteData>
		Temp = Temp % Factor;
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	9a 81       	ldd	r25, Y+2	; 0x02
    24e4:	ab 81       	ldd	r26, Y+3	; 0x03
    24e6:	bc 81       	ldd	r27, Y+4	; 0x04
    24e8:	2d 81       	ldd	r18, Y+5	; 0x05
    24ea:	3e 81       	ldd	r19, Y+6	; 0x06
    24ec:	4f 81       	ldd	r20, Y+7	; 0x07
    24ee:	58 85       	ldd	r21, Y+8	; 0x08
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__udivmodsi4>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	9a 83       	std	Y+2, r25	; 0x02
    2500:	ab 83       	std	Y+3, r26	; 0x03
    2502:	bc 83       	std	Y+4, r27	; 0x04
		Factor = Factor / 10;
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	9e 81       	ldd	r25, Y+6	; 0x06
    2508:	af 81       	ldd	r26, Y+7	; 0x07
    250a:	b8 85       	ldd	r27, Y+8	; 0x08
    250c:	2a e0       	ldi	r18, 0x0A	; 10
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__udivmodsi4>
    251c:	da 01       	movw	r26, r20
    251e:	c9 01       	movw	r24, r18
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	9e 83       	std	Y+6, r25	; 0x06
    2524:	af 83       	std	Y+7, r26	; 0x07
    2526:	b8 87       	std	Y+8, r27	; 0x08
		Temp = Temp / 10;
		Factor = Factor * 10;
	}

	Temp = Number;
	while(Temp != 0)
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	9a 81       	ldd	r25, Y+2	; 0x02
    252c:	ab 81       	ldd	r26, Y+3	; 0x03
    252e:	bc 81       	ldd	r27, Y+4	; 0x04
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	a1 05       	cpc	r26, r1
    2534:	b1 05       	cpc	r27, r1
    2536:	19 f6       	brne	.-122    	; 0x24be <LCD_vidPrintNumber+0xbc>
	{
		LCD_vidWriteData((Temp / Factor) + 0x30);
		Temp = Temp % Factor;
		Factor = Factor / 10;
	}
}
    2538:	2c 96       	adiw	r28, 0x0c	; 12
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <main>:




void main (void)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	0f 92       	push	r0
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
uint8_t result ;

	// LCD PORT
	Dio_vidSetPortDirection(Dio_PORTB,Dio_Output);
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	61 e0       	ldi	r22, 0x01	; 1
    2558:	0e 94 ef 08 	call	0x11de	; 0x11de <Dio_vidSetPortDirection>
	//LCD CONTROL
	Dio_vidSetPinDirection(Dio_PORTC,0,Dio_Output);
    255c:	82 e0       	ldi	r24, 0x02	; 2
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	0e 94 fd 07 	call	0xffa	; 0xffa <Dio_vidSetPinDirection>
	Dio_vidSetPinDirection(Dio_PORTC,1,Dio_Output);
    2566:	82 e0       	ldi	r24, 0x02	; 2
    2568:	61 e0       	ldi	r22, 0x01	; 1
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	0e 94 fd 07 	call	0xffa	; 0xffa <Dio_vidSetPinDirection>
	//MOTOR
	Dio_vidSetPinDirection(Dio_PORTD,6,Dio_Output);
    2570:	83 e0       	ldi	r24, 0x03	; 3
    2572:	66 e0       	ldi	r22, 0x06	; 6
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	0e 94 fd 07 	call	0xffa	; 0xffa <Dio_vidSetPinDirection>
	//led 3
	Dio_vidSetPinDirection(Dio_PORTC,2,Dio_Output);
    257a:	82 e0       	ldi	r24, 0x02	; 2
    257c:	62 e0       	ldi	r22, 0x02	; 2
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 fd 07 	call	0xffa	; 0xffa <Dio_vidSetPinDirection>
	Dio_vidSetPinDirection(Dio_PORTC,3,Dio_Output);
    2584:	82 e0       	ldi	r24, 0x02	; 2
    2586:	63 e0       	ldi	r22, 0x03	; 3
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 fd 07 	call	0xffa	; 0xffa <Dio_vidSetPinDirection>
	Dio_vidSetPinDirection(Dio_PORTC,4,Dio_Output);
    258e:	82 e0       	ldi	r24, 0x02	; 2
    2590:	64 e0       	ldi	r22, 0x04	; 4
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 fd 07 	call	0xffa	; 0xffa <Dio_vidSetPinDirection>

	LCD_vidInit();
    2598:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <LCD_vidInit>
	ADC_vidInit();
    259c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <ADC_vidInit>
	UART_Init();
    25a0:	0e 94 9b 05 	call	0xb36	; 0xb36 <UART_Init>

}
    25a4:	0f 90       	pop	r0
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <__mulsi3>:
    25ac:	62 9f       	mul	r22, r18
    25ae:	d0 01       	movw	r26, r0
    25b0:	73 9f       	mul	r23, r19
    25b2:	f0 01       	movw	r30, r0
    25b4:	82 9f       	mul	r24, r18
    25b6:	e0 0d       	add	r30, r0
    25b8:	f1 1d       	adc	r31, r1
    25ba:	64 9f       	mul	r22, r20
    25bc:	e0 0d       	add	r30, r0
    25be:	f1 1d       	adc	r31, r1
    25c0:	92 9f       	mul	r25, r18
    25c2:	f0 0d       	add	r31, r0
    25c4:	83 9f       	mul	r24, r19
    25c6:	f0 0d       	add	r31, r0
    25c8:	74 9f       	mul	r23, r20
    25ca:	f0 0d       	add	r31, r0
    25cc:	65 9f       	mul	r22, r21
    25ce:	f0 0d       	add	r31, r0
    25d0:	99 27       	eor	r25, r25
    25d2:	72 9f       	mul	r23, r18
    25d4:	b0 0d       	add	r27, r0
    25d6:	e1 1d       	adc	r30, r1
    25d8:	f9 1f       	adc	r31, r25
    25da:	63 9f       	mul	r22, r19
    25dc:	b0 0d       	add	r27, r0
    25de:	e1 1d       	adc	r30, r1
    25e0:	f9 1f       	adc	r31, r25
    25e2:	bd 01       	movw	r22, r26
    25e4:	cf 01       	movw	r24, r30
    25e6:	11 24       	eor	r1, r1
    25e8:	08 95       	ret

000025ea <__udivmodsi4>:
    25ea:	a1 e2       	ldi	r26, 0x21	; 33
    25ec:	1a 2e       	mov	r1, r26
    25ee:	aa 1b       	sub	r26, r26
    25f0:	bb 1b       	sub	r27, r27
    25f2:	fd 01       	movw	r30, r26
    25f4:	0d c0       	rjmp	.+26     	; 0x2610 <__udivmodsi4_ep>

000025f6 <__udivmodsi4_loop>:
    25f6:	aa 1f       	adc	r26, r26
    25f8:	bb 1f       	adc	r27, r27
    25fa:	ee 1f       	adc	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	a2 17       	cp	r26, r18
    2600:	b3 07       	cpc	r27, r19
    2602:	e4 07       	cpc	r30, r20
    2604:	f5 07       	cpc	r31, r21
    2606:	20 f0       	brcs	.+8      	; 0x2610 <__udivmodsi4_ep>
    2608:	a2 1b       	sub	r26, r18
    260a:	b3 0b       	sbc	r27, r19
    260c:	e4 0b       	sbc	r30, r20
    260e:	f5 0b       	sbc	r31, r21

00002610 <__udivmodsi4_ep>:
    2610:	66 1f       	adc	r22, r22
    2612:	77 1f       	adc	r23, r23
    2614:	88 1f       	adc	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	1a 94       	dec	r1
    261a:	69 f7       	brne	.-38     	; 0x25f6 <__udivmodsi4_loop>
    261c:	60 95       	com	r22
    261e:	70 95       	com	r23
    2620:	80 95       	com	r24
    2622:	90 95       	com	r25
    2624:	9b 01       	movw	r18, r22
    2626:	ac 01       	movw	r20, r24
    2628:	bd 01       	movw	r22, r26
    262a:	cf 01       	movw	r24, r30
    262c:	08 95       	ret

0000262e <__prologue_saves__>:
    262e:	2f 92       	push	r2
    2630:	3f 92       	push	r3
    2632:	4f 92       	push	r4
    2634:	5f 92       	push	r5
    2636:	6f 92       	push	r6
    2638:	7f 92       	push	r7
    263a:	8f 92       	push	r8
    263c:	9f 92       	push	r9
    263e:	af 92       	push	r10
    2640:	bf 92       	push	r11
    2642:	cf 92       	push	r12
    2644:	df 92       	push	r13
    2646:	ef 92       	push	r14
    2648:	ff 92       	push	r15
    264a:	0f 93       	push	r16
    264c:	1f 93       	push	r17
    264e:	cf 93       	push	r28
    2650:	df 93       	push	r29
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	ca 1b       	sub	r28, r26
    2658:	db 0b       	sbc	r29, r27
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    2664:	09 94       	ijmp

00002666 <__epilogue_restores__>:
    2666:	2a 88       	ldd	r2, Y+18	; 0x12
    2668:	39 88       	ldd	r3, Y+17	; 0x11
    266a:	48 88       	ldd	r4, Y+16	; 0x10
    266c:	5f 84       	ldd	r5, Y+15	; 0x0f
    266e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2670:	7d 84       	ldd	r7, Y+13	; 0x0d
    2672:	8c 84       	ldd	r8, Y+12	; 0x0c
    2674:	9b 84       	ldd	r9, Y+11	; 0x0b
    2676:	aa 84       	ldd	r10, Y+10	; 0x0a
    2678:	b9 84       	ldd	r11, Y+9	; 0x09
    267a:	c8 84       	ldd	r12, Y+8	; 0x08
    267c:	df 80       	ldd	r13, Y+7	; 0x07
    267e:	ee 80       	ldd	r14, Y+6	; 0x06
    2680:	fd 80       	ldd	r15, Y+5	; 0x05
    2682:	0c 81       	ldd	r16, Y+4	; 0x04
    2684:	1b 81       	ldd	r17, Y+3	; 0x03
    2686:	aa 81       	ldd	r26, Y+2	; 0x02
    2688:	b9 81       	ldd	r27, Y+1	; 0x01
    268a:	ce 0f       	add	r28, r30
    268c:	d1 1d       	adc	r29, r1
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	ed 01       	movw	r28, r26
    269a:	08 95       	ret

0000269c <_exit>:
    269c:	f8 94       	cli

0000269e <__stop_program>:
    269e:	ff cf       	rjmp	.-2      	; 0x269e <__stop_program>
